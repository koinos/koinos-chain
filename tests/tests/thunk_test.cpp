#include <algorithm>
#include <cmath>
#include <filesystem>
#include <fstream>
#include <numeric>
#include <random>
#include <type_traits>
#include <vector>

#include <boost/test/unit_test.hpp>
#include <boost/filesystem.hpp>

#include <google/protobuf/util/json_util.h>
#include <google/protobuf/util/message_differencer.h>

#include <koinos/log.hpp>

#include <koinos/chain/controller.hpp>
#include <koinos/chain/execution_context.hpp>
#include <koinos/chain/constants.hpp>
#include <koinos/chain/exceptions.hpp>
#include <koinos/chain/host_api.hpp>
#include <koinos/chain/thunk_dispatcher.hpp>
#include <koinos/chain/session.hpp>
#include <koinos/chain/state.hpp>
#include <koinos/chain/system_calls.hpp>

#include <koinos/crypto/elliptic.hpp>

#include <koinos/vm_manager/exceptions.hpp>

#include <koinos/contracts/token/token.pb.h>

#include <koinos/tests/contracts.hpp>

#include <koinos/util/base58.hpp>
#include <koinos/util/hex.hpp>

using namespace koinos;
using namespace std::string_literals;

struct thunk_fixture
{
   thunk_fixture() :
      vm_backend( koinos::vm_manager::get_vm_backend() ),
      ctx( vm_backend, chain::intent::block_application ),
      host( ctx )
   {
      KOINOS_ASSERT( vm_backend, koinos::chain::unknown_backend_exception, "could not get vm backend" );

      initialize_logging( "koinos_test", {}, "info" );

      temp = std::filesystem::temp_directory_path() / boost::filesystem::unique_path().string();
      std::filesystem::create_directory( temp );

      auto seed = "test seed"s;
      _signing_private_key = crypto::private_key::regenerate( crypto::hash( crypto::multicodec::sha2_256, seed ) );

      auto entry = _genesis_data.add_entries();
      entry->set_key( chain::state::key::genesis_key );
      entry->set_value( _signing_private_key.get_public_key().to_address_bytes() );
      *entry->mutable_space() = chain::state::space::metadata();

      koinos::chain::resource_limit_data rd;

      rd.set_disk_storage_cost( 10 );
      rd.set_disk_storage_limit( 500'800 );

      rd.set_network_bandwidth_cost( 5 );
      rd.set_network_bandwidth_limit( 1'048'576 );

      rd.set_compute_bandwidth_cost( 1 );
      rd.set_compute_bandwidth_limit( 100'000'000 );

      entry = _genesis_data.add_entries();
      entry->set_key( chain::state::key::resource_limit_data );
      entry->set_value( util::converter::as< std::string >( rd ) );
      *entry->mutable_space() = chain::state::space::metadata();

      koinos::chain::max_account_resources mar;

      mar.set_value( 10'000'000 );

      entry = _genesis_data.add_entries();
      entry->set_key( chain::state::key::max_account_resources );
      entry->set_value( util::converter::as< std::string >( mar ) );
      *entry->mutable_space() = chain::state::space::metadata();

      entry = _genesis_data.add_entries();
      entry->set_key( chain::state::key::protocol_descriptor );

      // protoc --experimental_allow_proto3_optional --descriptor_set_out=build/koinos_protocol.pb --include_imports `find koinos -name 'protocol.proto'`
      std::string protocol_descriptor = util::from_hex< std::string >( "" );
      entry->set_value( protocol_descriptor );
      *entry->mutable_space() = chain::state::space::metadata();

      std::map< std::string, uint64_t > thunk_compute {
         { "apply_block", 16659 },
         { "apply_call_contract_operation", 487 },
         { "apply_set_system_call_operation", 5986 },
         { "apply_set_system_contract_operation", 4746 },
         { "apply_transaction", 13208 },
         { "apply_upload_contract_operation", 3722 },
         { "call_contract", 4810 },
         { "consume_account_rc", 734 },
         { "consume_block_resources", 729 },
         { "deserialize_message_per_byte", 1 },
         { "deserialize_multihash_base", 1 },
         { "deserialize_multihash_per_byte", 478 },
         { "event", 1361 },
         { "event_per_impacted", 98 },
         { "exit", 10246 },
         { "get_account_nonce", 768 },
         { "get_account_rc", 1046 },
         { "get_block", 1131 },
         { "get_block_field", 1420 },
         { "get_caller", 818 },
         { "get_chain_id", 1116 },
         { "get_arguments", 770 },
         { "get_contract_id", 774 },
         { "get_entry_point", 756 },
         { "get_head_info", 2160 },
         { "get_last_irreversible_block", 759 },
         { "get_next_object", 11071 },
         { "get_object", 1067 },
         { "get_prev_object", 15633 },
         { "get_resource_limits", 1153 },
         { "get_transaction", 1619 },
         { "get_transaction_field", 1518 },
         { "hash", 1573 },
         { "keccak_256_base", 1945 },
         { "keccak_256_per_byte", 1 },
         { "log", 746 },
         { "object_serialization_per_byte", 1 },
         { "post_block_callback", 724 },
         { "post_transaction_callback", 741 },
         { "pre_block_callback", 722 },
         { "pre_transaction_callback", 718 },
         { "process_block_signature", 5085 },
         { "put_object", 1053 },
         { "recover_public_key", 29531 },
         { "remove_object", 908 },
         { "check_authority", 13295 },
         { "check_system_authority", 13357 },
         { "ripemd_160_base", 1596 },
         { "ripemd_160_per_byte", 1 },
         { "set_account_nonce", 753 },
         { "sha1_base", 1137 },
         { "sha1_per_byte", 1 },
         { "sha2_256_base", 1542 },
         { "sha2_256_per_byte", 1 },
         { "sha2_512_base", 1612 },
         { "sha2_512_per_byte", 1 },
         { "verify_account_nonce", 879 },
         { "verify_merkle_root", 1 },
         { "verify_signature", 794 },
         { "verify_vrf_proof", 143804 },
      };

      koinos::chain::compute_bandwidth_registry cbr;

      for ( const auto& [ key, value ] : thunk_compute )
      {
         auto centry = cbr.add_entries();
         centry->set_name( key );
         centry->set_compute( value );
      }

      entry = _genesis_data.add_entries();
      entry->set_key( chain::state::key::compute_bandwidth_registry );
      entry->set_value( util::converter::as< std::string >( cbr ) );
      *entry->mutable_space() = chain::state::space::metadata();

      entry = _genesis_data.add_entries();
      entry->set_key( chain::state::key::block_hash_code );
      entry->set_value( util::converter::as< std::string >( unsigned_varint{ std::underlying_type_t< crypto::multicodec >( crypto::multicodec::sha2_256 ) } ) );
      *entry->mutable_space() = chain::state::space::metadata();

      db.open( temp, [&]( state_db::state_node_ptr root )
      {
         // Write genesis objects into the database
         for ( const auto& entry : _genesis_data.entries() )
         {
            KOINOS_ASSERT(
               root->put_object( entry.space(), entry.key(), &entry.value() ) == entry.value().size(),
               koinos::chain::unexpected_state,
               "encountered unexpected object in initial state"
            );
         }
         LOG(info) << "Wrote " << _genesis_data.entries().size() << " genesis objects into new database";

         // Read genesis public key from the database, assert its existence at the correct location
         KOINOS_ASSERT(
            root->get_object( chain::state::space::metadata(), chain::state::key::genesis_key ),
            koinos::chain::unexpected_state,
            "could not find genesis public key in database"
         );

         // Calculate and write the chain ID into the database
         auto chain_id = crypto::hash( koinos::crypto::multicodec::sha2_256, _genesis_data );
         LOG(info) << "Calculated chain ID: " << chain_id;
         auto chain_id_str = util::converter::as< std::string >( chain_id );
         KOINOS_ASSERT(
            root->put_object( chain::state::space::metadata(), chain::state::key::chain_id, &chain_id_str ) == chain_id_str.size(),
            koinos::chain::unexpected_state,
            "encountered unexpected chain id in initial state"
         );
         LOG(info) << "Wrote chain ID into new database";
      } );

      ctx.set_state_node( db.create_writable_node( db.get_head()->id(), crypto::hash( crypto::multicodec::sha2_256, 1 ) ) );
      ctx.reset_cache();
      ctx.push_frame( chain::stack_frame {
         .contract_id = "thunk_tests"s,
         .call_privilege = chain::privilege::kernel_mode
      } );

      ctx.resource_meter().set_resource_limit_data( chain::system_call::get_resource_limits( ctx ) );

      vm_backend->initialize();
   }

   ~thunk_fixture()
   {
      boost::log::core::get()->remove_all_sinks();
      db.close();
      std::filesystem::remove_all( temp );
   }

   void set_transaction_merkle_roots( protocol::transaction& transaction, crypto::multicodec code, crypto::digest_size size = crypto::digest_size( 0 ) )
   {
      std::vector< crypto::multihash > operations;
      operations.reserve( transaction.operations().size() );

      for ( const auto& op : transaction.operations() )
      {
         operations.emplace_back( crypto::hash( code, op, size ) );
      }

      auto operation_merkle_tree = crypto::merkle_tree( code, operations );
      transaction.mutable_header()->set_operation_merkle_root( util::converter::as< std::string >( operation_merkle_tree.root()->hash() ) );
   }

   void sign_transaction( protocol::transaction& transaction, crypto::private_key& transaction_signing_key )
   {
      // Signature is on the hash of the active data
      transaction.mutable_header()->set_payer( transaction_signing_key.get_public_key().to_address_bytes() );
      auto id_mh = crypto::hash( crypto::multicodec::sha2_256, transaction.header() );
      transaction.set_id( util::converter::as< std::string >( id_mh ) );
      transaction.clear_signatures();
      transaction.add_signatures( util::converter::as< std::string >( transaction_signing_key.sign_compact( id_mh ) ) );
   }

   void set_block_merkle_roots( protocol::block& block, crypto::multicodec code, crypto::digest_size size = crypto::digest_size( 0 ) )
   {
      std::vector< crypto::multihash > hashes;
      hashes.reserve( block.transactions().size() * 2 );

      for ( const auto& trx : block.transactions() )
      {
         hashes.emplace_back( crypto::hash( code, trx.header(), size ) );
         hashes.emplace_back( crypto::hash( code, trx.signatures(), size ) );
      }

      auto transaction_merkle_tree = crypto::merkle_tree( code, hashes );
      block.mutable_header()->set_transaction_merkle_root( util::converter::as< std::string >( transaction_merkle_tree.root()->hash() ) );
   }

   std::filesystem::path temp;
   koinos::state_db::database db;
   std::shared_ptr< koinos::vm_manager::vm_backend > vm_backend;
   koinos::chain::execution_context ctx;
   koinos::chain::host_api host;
   koinos::crypto::private_key _signing_private_key;
   chain::genesis_data _genesis_data;
};

enum token_entry : uint32_t
{
   name         = 0x82a3537f,
   symbol       = 0xb76a7ca1,
   decimals     = 0xee80fd2f,
   total_supply = 0xb0da3934,
   balance_of   = 0x5c721497,
   transfer     = 0x27f576ca,
   mint         = 0xdc6f17bb
};

namespace koinos::chain::thunk {

void test_thunk( execution_context& ctx, const std::string& s )
{
   thunk::_log( ctx, "thunk: " + s );
}

} // koinos::chain::thunk

BOOST_FIXTURE_TEST_SUITE( thunk_tests, thunk_fixture )

BOOST_AUTO_TEST_CASE( get_transaction_field )
{ try {
   koinos::protocol::transaction trx;

   koinos::contracts::token::transfer_arguments xfer_arg;
   xfer_arg.set_from( _signing_private_key.get_public_key().to_address_bytes() );
   xfer_arg.set_to( _signing_private_key.get_public_key().to_address_bytes() );
   xfer_arg.set_value( 100 );

   auto op = trx.add_operations()->mutable_call_contract();
   op->set_contract_id( util::from_hex< std::string >( "0xDEADBEEF" ) );
   op->set_entry_point( token_entry::transfer );
   op->set_args( xfer_arg.SerializeAsString() );
   trx.mutable_header()->set_rc_limit( 10'000'000 );
   trx.mutable_header()->set_nonce( util::converter::as< std::string>( uint64_t( 12 ) ) );
   trx.mutable_header()->set_payer( util::from_hex< std::string >( "0x1234" ) );
   trx.mutable_header()->set_payee( util::from_hex< std::string >( "0xABCD" ) );
   set_transaction_merkle_roots( trx, koinos::crypto::multicodec::sha2_256 );
   trx.set_id( util::converter::as< std::string >( crypto::hash( crypto::multicodec::sha2_256, trx.header() ) ) );
   sign_transaction( trx, _signing_private_key );
   ctx.set_transaction( trx );

   BOOST_TEST_MESSAGE( "Testing dynamic transaction field retrieval" );

   koinos::chain::value_type val;

   BOOST_TEST_MESSAGE( "Retrieving ID" );
   val = koinos::chain::system_call::get_transaction_field( ctx, "id" );
   BOOST_REQUIRE_EQUAL( val.bytes_value(), trx.id() );

   BOOST_TEST_MESSAGE( "Retrieving header" );
   val = koinos::chain::system_call::get_transaction_field( ctx, "header" );
   BOOST_REQUIRE( val.has_message_value() );
   koinos::protocol::transaction_header hdr;
   val.message_value().UnpackTo( &hdr );
   BOOST_REQUIRE( google::protobuf::util::MessageDifferencer::Equals( hdr, trx.header() ) );

   BOOST_TEST_MESSAGE( "Retrieving header.rc_limit" );
   val = koinos::chain::system_call::get_transaction_field( ctx, "header.rc_limit" );
   BOOST_REQUIRE_EQUAL( val.uint64_value(), trx.header().rc_limit() );

   BOOST_TEST_MESSAGE( "Retrieving header.nonce" );
   val = koinos::chain::system_call::get_transaction_field( ctx, "header.nonce" );
   BOOST_REQUIRE_EQUAL( val.bytes_value(), trx.header().nonce() );

   BOOST_TEST_MESSAGE( "Retrieving header.operation_merkle_root" );
   val = koinos::chain::system_call::get_transaction_field( ctx, "header.operation_merkle_root" );
   BOOST_REQUIRE_EQUAL( val.bytes_value(), trx.header().operation_merkle_root() );

   BOOST_TEST_MESSAGE( "Retrieving header.payer" );
   val = koinos::chain::system_call::get_transaction_field( ctx, "header.payer" );
   BOOST_REQUIRE_EQUAL( val.bytes_value(), trx.header().payer() );

   BOOST_TEST_MESSAGE( "Retrieving header.payee" );
   val = koinos::chain::system_call::get_transaction_field( ctx, "header.payee" );
   BOOST_REQUIRE_EQUAL( val.bytes_value(), trx.header().payee() );

   BOOST_TEST_MESSAGE( "Retrieving operations" );
   val = koinos::chain::system_call::get_transaction_field( ctx, "operations" );
   BOOST_REQUIRE( val.has_message_value() );
   koinos::chain::list_type list;
   val.message_value().UnpackTo( &list );
   BOOST_REQUIRE_EQUAL( list.values_size(), 1 );
   koinos::protocol::operation op_;
   list.values( 0 ).message_value().UnpackTo( &op_ );
   BOOST_REQUIRE( google::protobuf::util::MessageDifferencer::Equals( op_, trx.operations( 0 ) ) );

   BOOST_TEST_MESSAGE( "Retrieving signatures" );
   val = koinos::chain::system_call::get_transaction_field( ctx, "signatures" );
   val.message_value().UnpackTo( &list );
   for ( int i = 0; i < list.values_size(); i++ )
   {
      BOOST_REQUIRE_EQUAL( trx.signatures( i ), list.values( i ).bytes_value() );
   }

   BOOST_TEST_MESSAGE( "Testing dynamic transaction field not found" );

   BOOST_REQUIRE_THROW( chain::system_call::get_transaction_field( ctx, "non_existent_field" ), chain::field_not_found );

   ctx.clear_transaction();

   BOOST_TEST_MESSAGE( "Testing dynamic transaction field unexpected access" );

   BOOST_REQUIRE_THROW( chain::system_call::get_transaction_field( ctx, "id" ), chain::unexpected_access );

} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( get_block_field )
{ try {
   koinos::protocol::block block;

   auto duration = std::chrono::system_clock::now().time_since_epoch();
   block.mutable_header()->set_timestamp( std::chrono::duration_cast< std::chrono::milliseconds >( duration ).count() );
   block.mutable_header()->set_height( 2 );
   block.mutable_header()->set_previous_state_merkle_root( util::converter::as< std::string >( crypto::multihash::zero( crypto::multicodec::sha2_256 ) ) );
   block.mutable_header()->set_previous( util::converter::as< std::string >( crypto::multihash::zero( crypto::multicodec::sha2_256 ) ) );

   koinos::protocol::transaction trx;

   koinos::contracts::token::transfer_arguments xfer_arg;
   xfer_arg.set_from( _signing_private_key.get_public_key().to_address_bytes() );
   xfer_arg.set_to( _signing_private_key.get_public_key().to_address_bytes() );
   xfer_arg.set_value( 100 );

   auto op3 = trx.add_operations()->mutable_call_contract();
   op3->set_contract_id( op3->contract_id() );
   op3->set_entry_point( token_entry::transfer );
   op3->set_args( xfer_arg.SerializeAsString() );
   trx.mutable_header()->set_rc_limit( 10'000'000 );
   trx.mutable_header()->set_nonce( util::converter::as< std::string>( uint64_t( 12 ) ) );
   trx.mutable_header()->set_payer( util::from_hex< std::string >( "0x1234" ) );
   trx.mutable_header()->set_payee( util::from_hex< std::string >( "0xABCD" ) );
   set_transaction_merkle_roots( trx, koinos::crypto::multicodec::sha2_256 );
   trx.set_id( util::converter::as< std::string >( crypto::hash( crypto::multicodec::sha2_256, trx.header() ) ) );
   sign_transaction( trx, _signing_private_key );

   *block.add_transactions() = trx;

   ctx.set_block( block );

   BOOST_TEST_MESSAGE( "Testing dynamic block field retrieval" );

   koinos::chain::value_type val;

   BOOST_TEST_MESSAGE( "Retrieving ID" );
   val = koinos::chain::system_call::get_block_field( ctx, "id" );
   BOOST_REQUIRE_EQUAL( val.bytes_value(), block.id() );

   BOOST_TEST_MESSAGE( "Retrieving header" );
   val = koinos::chain::system_call::get_block_field( ctx, "header" );
   BOOST_REQUIRE( val.has_message_value() );
   koinos::protocol::block_header hdr;
   val.message_value().UnpackTo( &hdr );
   BOOST_REQUIRE( google::protobuf::util::MessageDifferencer::Equals( hdr, block.header() ) );

   BOOST_TEST_MESSAGE( "Retrieving header.previous" );
   val = koinos::chain::system_call::get_block_field( ctx, "header.previous" );
   BOOST_REQUIRE_EQUAL( val.bytes_value(), block.header().previous() );

   BOOST_TEST_MESSAGE( "Retrieving header.height" );
   val = koinos::chain::system_call::get_block_field( ctx, "header.height" );
   BOOST_REQUIRE_EQUAL( val.uint64_value(), block.header().height() );

   BOOST_TEST_MESSAGE( "Retrieving header.timestamp" );
   val = koinos::chain::system_call::get_block_field( ctx, "header.timestamp" );
   BOOST_REQUIRE_EQUAL( val.uint64_value(), block.header().timestamp() );

   BOOST_TEST_MESSAGE( "Retrieving header.previous_state_merkle_root" );
   val = koinos::chain::system_call::get_block_field( ctx, "header.previous_state_merkle_root" );
   BOOST_REQUIRE_EQUAL( val.bytes_value(), block.header().previous_state_merkle_root() );

   BOOST_TEST_MESSAGE( "Retrieving header.transaction_merkle_root" );
   val = koinos::chain::system_call::get_block_field( ctx, "header.transaction_merkle_root" );
   BOOST_REQUIRE_EQUAL( val.bytes_value(), block.header().transaction_merkle_root() );

   BOOST_TEST_MESSAGE( "Retrieving header.signer" );
   val = koinos::chain::system_call::get_block_field( ctx, "header.signer" );
   BOOST_REQUIRE_EQUAL( val.bytes_value(), block.header().signer() );

   BOOST_TEST_MESSAGE( "Retrieving transactions" );
   val = koinos::chain::system_call::get_block_field( ctx, "transactions" );
   BOOST_REQUIRE( val.has_message_value() );
   koinos::chain::list_type list;
   val.message_value().UnpackTo( &list );
   BOOST_REQUIRE_EQUAL( list.values_size(), 1 );
   for ( int i = 0; i < list.values_size(); i++ )
   {
      koinos::protocol::transaction tx;
      list.values( i ).message_value().UnpackTo( &tx );
      BOOST_REQUIRE( google::protobuf::util::MessageDifferencer::Equals( block.transactions( i ), tx ) );
   }

   BOOST_TEST_MESSAGE( "Retrieving signature" );
   val = koinos::chain::system_call::get_block_field( ctx, "signature" );
   BOOST_REQUIRE_EQUAL( val.bytes_value(), block.signature() );

   BOOST_TEST_MESSAGE( "Testing dynamic block field not found" );

   BOOST_REQUIRE_THROW( chain::system_call::get_block_field( ctx, "non_existent_field" ), chain::field_not_found );

   ctx.clear_block();

   BOOST_TEST_MESSAGE( "Testing dynamic block field unexpected access" );

   BOOST_REQUIRE_THROW( chain::system_call::get_block_field( ctx, "id" ), chain::unexpected_access );

} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( db_crud )
{ try {
   std::string object_data;

   chain::object_space test_space;
   test_space.set_system( true );
   test_space.set_zone( chain::state::zone::kernel );
   test_space.set_id( 100 );

   object_data = "object1"s;

   BOOST_TEST_MESSAGE( "Test putting an object" );

   chain::system_call::put_object( ctx, test_space, util::converter::as< std::string >( 1 ), object_data );
   auto db_obj = chain::system_call::get_object( ctx, test_space, util::converter::as< std::string >( 1 ) );
   BOOST_REQUIRE( object_data == "object1" );

   BOOST_TEST_MESSAGE( "Testing getting a non-existent object" );

   db_obj = chain::system_call::get_object( ctx, test_space, util::converter::as< std::string >( 2 ) );
   BOOST_REQUIRE( !db_obj.exists() );

   BOOST_TEST_MESSAGE( "Test iteration" );

   object_data = "object2"s;
   chain::system_call::put_object( ctx, test_space, util::converter::as< std::string >( 2 ), object_data );
   object_data = "object3"s;
   chain::system_call::put_object( ctx, test_space, util::converter::as< std::string >( 3 ), object_data );

   db_obj = chain::system_call::get_next_object( ctx, test_space, util::converter::as< std::string >( 2 ) );
   BOOST_REQUIRE( db_obj.value() == "object3" );

   db_obj = chain::system_call::get_prev_object( ctx, test_space, util::converter::as< std::string >( 2 ) );
   BOOST_REQUIRE( db_obj.value() == "object1" );

   BOOST_TEST_MESSAGE( "Test iterator overrun" );

   db_obj = chain::system_call::get_next_object( ctx, test_space, util::converter::as< std::string >( 3 ) );
   BOOST_REQUIRE( !db_obj.exists() );
   db_obj = chain::system_call::get_next_object( ctx, test_space, util::converter::as< std::string >( 4 ) );
   BOOST_REQUIRE( !db_obj.exists() );
   db_obj = chain::system_call::get_prev_object( ctx, test_space, util::converter::as< std::string >( 1 ) );
   BOOST_REQUIRE( !db_obj.exists() );
   db_obj = chain::system_call::get_prev_object( ctx, test_space, util::converter::as< std::string >( 0 ) );
   BOOST_REQUIRE( !db_obj.exists() );

   object_data = "space1.object1"s;
   chain::system_call::put_object( ctx, chain::state::space::contract_bytecode(), util::converter::as< std::string >( 1 ), object_data );
   db_obj = chain::system_call::get_next_object( ctx, test_space, util::converter::as< std::string >( 3 ) );
   BOOST_REQUIRE( !db_obj.exists() );
   db_obj = chain::system_call::get_next_object( ctx, chain::state::space::contract_bytecode(), util::converter::as< std::string >( 1 ) );
   BOOST_REQUIRE( !db_obj.exists() );
   db_obj = chain::system_call::get_prev_object( ctx, chain::state::space::contract_bytecode(), util::converter::as< std::string >( 1 ) );
   BOOST_REQUIRE( !db_obj.exists() );

   BOOST_TEST_MESSAGE( "Test object modification" );
   object_data = "object1.1"s;
   chain::system_call::put_object( ctx, test_space, util::converter::as< std::string >( 1 ), object_data );
   db_obj = chain::system_call::get_object( ctx, test_space, util::converter::as< std::string >( 1 ) );
   BOOST_REQUIRE( db_obj.value() == "object1.1" );

   BOOST_TEST_MESSAGE( "Test object deletion" );
   object_data.clear();
   chain::system_call::put_object( ctx, test_space, util::converter::as< std::string >( 1 ), object_data );
   db_obj = chain::system_call::get_object( ctx, test_space, util::converter::as< std::string >( 1 ) );
   BOOST_REQUIRE( db_obj.exists() );
   BOOST_REQUIRE( db_obj.value().size() == 0 );

   chain::system_call::remove_object( ctx, test_space, util::converter::as< std::string >( 1 ) );
   db_obj = chain::system_call::get_object( ctx, test_space, util::converter::as< std::string >( 1 ) );
   BOOST_REQUIRE( !db_obj.exists() );

} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( contract_tests )
{ try {
   BOOST_TEST_MESSAGE( "Test uploading a contract" );

   auto contract_private_key = koinos::crypto::private_key::regenerate( koinos::crypto::hash( koinos::crypto::multicodec::sha2_256, "contract"s ) );
   auto contract_address = contract_private_key.get_public_key().to_address_bytes();
   koinos::protocol::transaction trx;
   sign_transaction( trx, contract_private_key );
   ctx.set_transaction( trx );

   koinos::protocol::upload_contract_operation op;
   op.set_contract_id( util::converter::as< std::string >( contract_address ) );
   op.set_bytecode( get_hello_wasm() );

   koinos::chain::system_call::apply_upload_contract_operation( ctx, op );

   auto bytecode_object = koinos::chain::system_call::get_object( ctx, koinos::chain::state::space::contract_bytecode(), op.contract_id() );
   auto meta = util::converter::to< koinos::chain::contract_metadata_object >( koinos::chain::system_call::get_object( ctx, koinos::chain::state::space::contract_metadata(), op.contract_id() ).value() );

   BOOST_REQUIRE( bytecode_object.exists() );
   BOOST_REQUIRE( bytecode_object.value().size() == op.bytecode().size() );
   BOOST_REQUIRE( std::memcmp( bytecode_object.value().c_str(), op.bytecode().c_str(), op.bytecode().size() ) == 0 );
   BOOST_REQUIRE( meta.hash() == util::converter::as< std::string >( koinos::crypto::hash( koinos::crypto::multicodec::sha2_256, bytecode_object.value() ) ) );

   BOOST_TEST_MESSAGE( "Test executing a contract" );

   koinos::protocol::call_contract_operation op2;
   op2.set_contract_id( op.contract_id() );
   koinos::chain::system_call::apply_call_contract_operation( ctx, op2 );
   BOOST_REQUIRE_EQUAL( "Greetings from koinos vm", ctx.chronicler().logs()[0] );

   BOOST_TEST_MESSAGE( "Test contract return" );

   // Upload the return test contract
   op.set_bytecode( get_contract_return_wasm() );
   koinos::chain::system_call::apply_upload_contract_operation( ctx, op );

   auto contract_ret = koinos::chain::system_call::call(ctx, op.contract_id(), 0, "echo").value();

   BOOST_REQUIRE_EQUAL( contract_ret, "echo" );

} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( override_tests )
{ try {
   BOOST_TEST_MESSAGE( "Test set system call operation" );

   auto seed = "non-genesis key"s;
   auto random_private_key = koinos::crypto::private_key::regenerate( koinos::crypto::hash( koinos::crypto::multicodec::sha2_256, seed ) );

   koinos::protocol::transaction tx;
   sign_transaction( tx, random_private_key );
   ctx.set_transaction( tx );

   // Upload a test contract to use as override
   auto contract_address = random_private_key.get_public_key().to_address_bytes();

   koinos::protocol::upload_contract_operation contract_op;
   contract_op.set_contract_id( util::converter::as< std::string >( contract_address ) );
   contract_op.set_bytecode( get_hello_wasm() );

   koinos::chain::system_call::apply_upload_contract_operation( ctx, contract_op );

   koinos::protocol::call_contract_operation call_op;
   call_op.set_contract_id( contract_op.contract_id() );
   koinos::chain::system_call::apply_call_contract_operation( ctx, call_op );
   auto original_message = host._ctx.chronicler().logs()[0];
   for ( const auto& message : host._ctx.chronicler().logs() )
      LOG(info) << message;
   BOOST_REQUIRE_EQUAL( "Greetings from koinos vm", original_message );

   // Override log with a contract that prepends a message before printing
   auto random_private_key2 = koinos::crypto::private_key::regenerate( koinos::crypto::hash( koinos::crypto::multicodec::sha2_256, "key2"s ) );
   auto contract_address2 = random_private_key2.get_public_key().to_address_bytes();

   koinos::protocol::upload_contract_operation contract_op2;
   contract_op2.set_contract_id( util::converter::as< std::string >( contract_address2 ) );
   contract_op2.set_bytecode( get_syscall_override_wasm() );

   sign_transaction( tx, random_private_key2 );
   ctx.set_transaction( tx );

   koinos::chain::system_call::apply_upload_contract_operation( ctx, contract_op2 );

   // Set the system call
   koinos::protocol::set_system_call_operation set_op;
   set_op.set_call_id( std::underlying_type_t< chain::system_call_id >( chain::system_call_id::log ) );
   set_op.mutable_target()->mutable_system_call_bundle()->set_contract_id( contract_op2.contract_id() );
   set_op.mutable_target()->mutable_system_call_bundle()->set_entry_point( 0 );

   BOOST_TEST_MESSAGE( "Test failure to override system call without genesis key" );

   BOOST_REQUIRE_THROW( koinos::chain::system_call::apply_set_system_call_operation( ctx, set_op ), koinos::chain::authorization_failed );

   BOOST_TEST_MESSAGE( "Test failure to set system contract without genesis key" );

   koinos::protocol::set_system_contract_operation system_contract_op;
   system_contract_op.set_contract_id( contract_op2.contract_id() );
   system_contract_op.set_system_contract( true );

   BOOST_REQUIRE_THROW( koinos::chain::system_call::apply_set_system_contract_operation( ctx, system_contract_op ), koinos::chain::authorization_failed );

   BOOST_TEST_MESSAGE( "Test failure to override system call without system contract" );

   // Overriding system calls requires the genesis key
   sign_transaction( tx, _signing_private_key );
   ctx.set_transaction( tx );

   BOOST_REQUIRE_THROW( koinos::chain::system_call::apply_set_system_call_operation( ctx, set_op ), koinos::chain::invalid_contract );

   BOOST_TEST_MESSAGE( "Test success overriding a system call with the genesis key" );

   koinos::chain::system_call::apply_set_system_contract_operation( ctx, system_contract_op );
   koinos::chain::system_call::apply_set_system_call_operation( ctx, set_op );

   // Fetch the created call bundle from the database and check it has been updated
   auto call_target = koinos::util::converter::to< koinos::protocol::system_call_target >( koinos::chain::system_call::get_object( ctx, koinos::chain::state::space::system_call_dispatch(), util::converter::as< std::string >( set_op.call_id() ) ).value() );
   BOOST_REQUIRE( call_target.has_system_call_bundle() );
   ctx.set_state_node( ctx.get_state_node()->create_anonymous_node() );
   ctx.reset_cache();
   call_target = koinos::util::converter::to< koinos::protocol::system_call_target >( koinos::chain::system_call::get_object( ctx, koinos::chain::state::space::system_call_dispatch(), util::converter::as< std::string >( set_op.call_id() ) ).value() );
   BOOST_REQUIRE( call_target.has_system_call_bundle() );
   BOOST_REQUIRE( call_target.system_call_bundle().contract_id() == set_op.target().system_call_bundle().contract_id() );
   BOOST_REQUIRE( call_target.system_call_bundle().entry_point() == set_op.target().system_call_bundle().entry_point() );

   // Ensure exception thrown on invalid contract
   auto false_id = koinos::crypto::hash( koinos::crypto::multicodec::ripemd_160, 1234 );
   set_op.mutable_target()->mutable_system_call_bundle()->set_contract_id( util::converter::as< std::string >( false_id ) );
   BOOST_REQUIRE_THROW( koinos::chain::system_call::apply_set_system_call_operation( ctx, set_op ), koinos::chain::invalid_contract );

   // Test invoking the overridden system call
   koinos::chain::system_call::apply_call_contract_operation( ctx, call_op );
   BOOST_REQUIRE_EQUAL( "test: " + original_message, host._ctx.chronicler().logs()[1] );

   koinos::chain::system_call::log( host._ctx, "Hello World" );
   BOOST_REQUIRE_EQUAL( "test: Hello World", host._ctx.chronicler().logs()[2] );

   BOOST_TEST_MESSAGE( "Test adding a new thunk" );

   const_cast< chain::thunk_dispatcher& >( chain::thunk_dispatcher::instance() ).register_thunk< chain::log_arguments, chain::log_result >( 0, chain::thunk::test_thunk );
   chain::log_arguments log_args;
   log_args.set_message( "Hello World" );
   auto args = util::converter::as< std::string >( log_args );
   char ret_buf[100];
   BOOST_CHECK_THROW( host.invoke_system_call( 0, ret_buf, 100, args.data(), args.size() ), chain::thunk_not_enabled );

   BOOST_TEST_MESSAGE( "Test overriding a system call with another thunk" );

   set_op.set_call_id( std::underlying_type_t< chain::system_call_id >( chain::system_call_id::log ) );
   set_op.mutable_target()->set_thunk_id( 0 );
   koinos::chain::system_call::apply_set_system_call_operation( ctx, set_op );
   ctx.set_state_node( ctx.get_state_node()->create_anonymous_node() );
   ctx.reset_cache();

   BOOST_CHECK_THROW( koinos::chain::system_call::log( host._ctx, "Hello World" ), chain::unexpected_state );

   auto cbr = util::converter::to< chain::compute_bandwidth_registry >( chain::system_call::get_object( ctx, chain::state::space::metadata(), chain::state::key::compute_bandwidth_registry ).value() );
   auto centry = cbr.add_entries();
   centry->set_name( "reserved_id" );
   centry->set_compute( 0 );

   chain::system_call::put_object( ctx, chain::state::space::metadata(), chain::state::key::compute_bandwidth_registry, util::converter::as< std::string >( cbr ) );
   ctx.set_state_node( ctx.get_state_node()->create_anonymous_node() );
   ctx.reset_cache();

   koinos::chain::system_call::log( host._ctx, "Hello World" );
   BOOST_REQUIRE_EQUAL( "thunk: Hello World", host._ctx.chronicler().logs()[3] );

   host.invoke_system_call( chain::system_call_id::log, ret_buf, 100, args.data(), args.size() );
   BOOST_CHECK_THROW( host.invoke_system_call( 0, ret_buf, 100, args.data(), args.size() ), chain::thunk_not_enabled );

   BOOST_TEST_MESSAGE( "Test enabling new thunk passthrough" );

   set_op.set_call_id( std::underlying_type_t< chain::system_call_id >( chain::system_call_id::reserved_id ) );
   koinos::chain::system_call::apply_set_system_call_operation( ctx, set_op );
   ctx.set_state_node( ctx.get_state_node()->create_anonymous_node() );
   ctx.reset_cache();

   host.invoke_system_call( 0, ret_buf, 100, args.data(), args.size() );

} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( thunk_test )
{ try {
   BOOST_TEST_MESSAGE( "thunk test" );

   chain::log_arguments args;

   std::string arg;
   std::string ret;

   args.set_message( "Hello World" );
   args.SerializeToString( &arg );

   host.invoke_thunk(
      chain::system_call_id::log,
      ret.data(),
      ret.size(),
      arg.data(),
      arg.size()
   );

   BOOST_CHECK_EQUAL( ret.size(), 0 );
   BOOST_REQUIRE_EQUAL( "Hello World", ctx.chronicler().logs()[0] );

   ctx.push_frame( chain::stack_frame{ .contract_id = "user_contract", .call_privilege = chain::user_mode } );
   BOOST_REQUIRE_THROW( host.invoke_thunk( chain::system_call_id::log, ret.data(), ret.size(), arg.data(), arg.size() ), chain::insufficient_privileges );
} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( system_call_test )
{ try {
   BOOST_TEST_MESSAGE( "system call test" );

   chain::log_arguments args;

   std::string arg;
   std::string ret;

   args.set_message( "Hello World" );
   args.SerializeToString( &arg );

   host.invoke_system_call(
      chain::system_call_id::log,
      ret.data(),
      ret.size(),
      arg.data(),
      arg.size()
   );

   BOOST_CHECK_EQUAL( ret.size(), 0 );
   BOOST_REQUIRE_EQUAL( "Hello World", ctx.chronicler().logs()[0] );
} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( get_head_info_thunk_test )
{ try {
   BOOST_TEST_MESSAGE( "get_head_info thunk test" );

   BOOST_CHECK_EQUAL( chain::system_call::get_head_info( ctx ).head_topology().height(), 1 );

   koinos::protocol::block block;
   block.mutable_header()->set_timestamp( 1000 );
   ctx.set_block( block );

   BOOST_REQUIRE( chain::system_call::get_head_info( ctx ).head_block_time() == block.header().timestamp() );

   ctx.clear_block();

   chain::system_call::put_object( ctx, chain::state::space::metadata(), chain::state::key::head_block, util::converter::as< std::string >( block ) );

   BOOST_REQUIRE( chain::system_call::get_head_info( ctx ).head_block_time() == block.header().timestamp() );

} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( hash_thunk_test )
{ try {
   BOOST_TEST_MESSAGE( "hash thunk test" );

   std::string test_string = "hash::string";

   auto thunk_hash  = util::converter::to< crypto::multihash >( chain::system_call::hash( ctx, static_cast< uint64_t >( crypto::multicodec::sha2_256 ), test_string ) );
   auto native_hash = crypto::hash( crypto::multicodec::sha2_256, test_string );

   BOOST_CHECK_EQUAL( thunk_hash, native_hash );

   koinos::block_topology block_topology;
   block_topology.set_height( 100 );
   block_topology.set_id( util::converter::as< std::string >( crypto::hash( crypto::multicodec::sha2_256, "random::id"s ) ) );
   block_topology.set_previous( util::converter::as< std::string >( crypto::hash( crypto::multicodec::sha2_256, "random::previous"s ) ) );

   std::string blob;
   block_topology.SerializeToString( &blob );
   thunk_hash = util::converter::to< crypto::multihash >( chain::system_call::hash( ctx, static_cast< uint64_t >( crypto::multicodec::sha2_256 ), blob ) );
   native_hash = crypto::hash( crypto::multicodec::sha2_256, block_topology );

   BOOST_CHECK_EQUAL( thunk_hash, native_hash );

   BOOST_REQUIRE_THROW( chain::system_call::hash( ctx, 0xDEADBEEF /* unknown code */, blob ), koinos::chain::unknown_hash_code );

} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( privileged_calls )
{
   ctx.set_privilege( chain::privilege::user_mode );
   BOOST_REQUIRE_THROW( chain::system_call::apply_block( ctx, protocol::block{} ), koinos::chain::insufficient_privileges );
   BOOST_REQUIRE_THROW( chain::system_call::apply_transaction( ctx, protocol::transaction() ), koinos::chain::insufficient_privileges );
   BOOST_REQUIRE_THROW( chain::system_call::apply_upload_contract_operation( ctx, protocol::upload_contract_operation{} ), koinos::chain::insufficient_privileges );
   BOOST_REQUIRE_THROW( chain::system_call::apply_call_contract_operation( ctx, protocol::call_contract_operation{} ), koinos::chain::insufficient_privileges );
   BOOST_REQUIRE_THROW( chain::system_call::apply_set_system_call_operation( ctx, protocol::set_system_call_operation{} ), koinos::chain::insufficient_privileges );
   BOOST_REQUIRE_THROW( chain::system_call::apply_set_system_contract_operation( ctx, protocol::set_system_contract_operation{} ), koinos::chain::insufficient_privileges );
}

BOOST_AUTO_TEST_CASE( last_irreversible_block_test )
{ try {

   BOOST_TEST_MESSAGE( "last irreversible block test" );

   for( uint64_t i = 0; i < chain::default_irreversible_threshold; i++ )
   {
      auto lib = chain::system_call::get_last_irreversible_block( ctx );
      BOOST_REQUIRE_EQUAL( lib, 0 );

      db.finalize_node( ctx.get_state_node()->id() );
      ctx.set_state_node( db.create_writable_node( ctx.get_state_node()->id(), crypto::hash( crypto::multicodec::sha2_256, i ) ) );
   }

   auto lib = chain::system_call::get_last_irreversible_block( ctx );
   BOOST_REQUIRE_EQUAL( lib, 1 );

} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( stack_tests )
{ try {
   BOOST_TEST_MESSAGE( "apply context stack tests" );
   ctx.pop_frame();

   BOOST_REQUIRE_THROW( ctx.pop_frame(), chain::stack_exception );

   auto call1 = util::converter::as< std::string >( crypto::hash( crypto::multicodec::ripemd_160, "call1"s ) );
   ctx.push_frame( chain::stack_frame{ .contract_id = call1 } );
   BOOST_CHECK_EQUAL( "", ctx.get_caller() );
   BOOST_CHECK_EQUAL( call1, ctx.get_contract_id() );

   auto call2 = util::converter::as< std::string >( crypto::hash( crypto::multicodec::ripemd_160, "call2"s ) );
   ctx.push_frame( chain::stack_frame{ .contract_id = call2 } );

   BOOST_CHECK_EQUAL( call1, ctx.get_caller() );
   BOOST_CHECK_EQUAL( call2, ctx.get_contract_id() );

   auto last_frame = ctx.pop_frame();
   BOOST_CHECK_EQUAL( call2, last_frame.contract_id );
   BOOST_CHECK_EQUAL( "", ctx.get_caller() );

   for ( int i = 2; i <= chain::execution_context::stack_limit; i++ )
   {
      ctx.push_frame( chain::stack_frame{} );
   }

   BOOST_REQUIRE_THROW( ctx.push_frame( chain::stack_frame{} ), chain::stack_overflow );

} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( check_authority )
{ try {
   auto foo_key = crypto::private_key::regenerate( crypto::hash( crypto::multicodec::sha2_256, "foo"s ) );
   auto foo_account_string = foo_key.get_public_key().to_address_bytes();

   auto bar_key = crypto::private_key::regenerate( crypto::hash( crypto::multicodec::sha2_256, "bar"s ) );
   auto bar_account_string = bar_key.get_public_key().to_address_bytes();

   protocol::transaction trx;
   sign_transaction( trx, foo_key );
   ctx.set_transaction( trx );

   chain::system_call::check_authority( ctx, koinos::chain::contract_call, foo_account_string );

   BOOST_REQUIRE_THROW( chain::system_call::check_authority( ctx, koinos::chain::contract_call, bar_account_string ), chain::authorization_failed );

   trx.clear_signatures();
   BOOST_REQUIRE_THROW( chain::system_call::check_authority( ctx, koinos::chain::contract_call, foo_account_string ), chain::authorization_failed );

} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( transaction_nonce_test )
{ try {
   using namespace koinos;

   ctx.set_intent( chain::intent::transaction_application );

   BOOST_TEST_MESSAGE( "Test transaction nonce" );

   auto key = crypto::private_key::regenerate( crypto::hash( crypto::multicodec::sha2_256, "alpha bravo charlie delta"s ) );

   protocol::transaction transaction;

   koinos::chain::value_type nonce_value;
   nonce_value.set_uint64_value( 1 );

   transaction.mutable_header()->set_rc_limit( 1'000'000 );
   transaction.mutable_header()->set_nonce( util::converter::as< std::string>( nonce_value ) );
   transaction.mutable_header()->set_payer( key.get_public_key().to_address_bytes() );
   transaction.mutable_header()->set_chain_id( koinos::chain::system_call::get_object( ctx, chain::state::space::metadata(), chain::state::key::chain_id ).value() );
   set_transaction_merkle_roots( transaction, crypto::multicodec::sha2_256 );
   sign_transaction( transaction, key );

   chain::system_call::apply_transaction( ctx, transaction );

   auto payer = transaction.header().payer();
   auto nonce = chain::system_call::get_account_nonce( ctx, payer );
   BOOST_REQUIRE_EQUAL( nonce, util::converter::as< std::string >( nonce_value ) );

   BOOST_TEST_MESSAGE( "Test duplicate transaction nonce" );
   transaction.mutable_header()->set_rc_limit( 1'000'000 );
   transaction.mutable_header()->set_nonce( util::converter::as< std::string>( nonce_value ) );
   set_transaction_merkle_roots( transaction, crypto::multicodec::sha2_256 );
   sign_transaction( transaction, key );

   BOOST_REQUIRE_THROW( chain::system_call::apply_transaction( ctx, transaction ), chain::chain_exception );

   nonce = chain::system_call::get_account_nonce( ctx, payer );
   BOOST_REQUIRE_EQUAL( nonce, util::converter::as< std::string >( nonce_value ) );

   BOOST_TEST_MESSAGE( "Test next transaction nonce" );
   nonce_value.set_uint64_value( 2 );
   transaction.mutable_header()->set_nonce( util::converter::as< std::string>( nonce_value ) );
   set_transaction_merkle_roots( transaction, crypto::multicodec::sha2_256 );
   sign_transaction( transaction, key );

   chain::system_call::apply_transaction( ctx, transaction );

   nonce = chain::system_call::get_account_nonce( ctx, payer );
   BOOST_REQUIRE_EQUAL( nonce, util::converter::as< std::string >( nonce_value ) );

   BOOST_TEST_MESSAGE( "Test duplicate transaction nonce" );
   transaction.mutable_header()->set_rc_limit( 1'000'000 );
   set_transaction_merkle_roots( transaction, crypto::multicodec::sha2_256 );
   sign_transaction( transaction, key );

   BOOST_REQUIRE_THROW( chain::system_call::apply_transaction( ctx, transaction ), chain::chain_exception );

   nonce = chain::system_call::get_account_nonce( ctx, payer );
   BOOST_REQUIRE_EQUAL( nonce, util::converter::as< std::string >( nonce_value ) );

   BOOST_TEST_MESSAGE( "Test skipping transaction nonce" );
   nonce_value.set_uint64_value( 10 );
   transaction.mutable_header()->set_nonce( util::converter::as< std::string>( nonce_value ) );
   set_transaction_merkle_roots( transaction, crypto::multicodec::sha2_256 );
   sign_transaction( transaction, key );

   chain::system_call::apply_transaction( ctx, transaction );

   nonce = chain::system_call::get_account_nonce( ctx, payer );
   BOOST_REQUIRE( nonce_value.ParseFromString( nonce ) );
   BOOST_REQUIRE_EQUAL( nonce_value.uint64_value(), uint64_t( 10 ) );

   BOOST_TEST_MESSAGE( "Test old nonce" );
   nonce_value.set_uint64_value( 5 );
   transaction.mutable_header()->set_nonce( util::converter::as< std::string >( nonce_value ) );
   set_transaction_merkle_roots( transaction, crypto::multicodec::sha2_256 );
   sign_transaction( transaction, key );

   BOOST_REQUIRE_THROW( chain::system_call::apply_transaction( ctx, transaction ), chain::chain_exception );
} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( get_contract_id_test )
{ try {
   auto contract_id = util::converter::as< std::string >( crypto::hash( crypto::multicodec::ripemd_160, "get_contract_id_test"s ) );

   ctx.push_frame( chain::stack_frame {
      .contract_id = contract_id,
      .call_privilege = chain::privilege::kernel_mode
   } );

   auto id = chain::system_call::get_contract_id( ctx );

   BOOST_REQUIRE_EQUAL( contract_id, id );
   //BOOST_REQUIRE( contract_id.size() == id.size() );
   //auto id_bytes = util::converter::as< std::vector< std::byte > >( id );
   //BOOST_REQUIRE( std::equal( contract_id.begin(), contract_id.end(), id_bytes.begin() ) );
} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( token_tests )
{ try {
   using namespace koinos;

   auto contract_private_key = crypto::private_key::regenerate( crypto::hash( koinos::crypto::multicodec::sha2_256, "token_contract"s ) );
   auto contract_address = contract_private_key.get_public_key().to_address_bytes();
   protocol::transaction trx;
   sign_transaction( trx, contract_private_key );
   ctx.set_transaction( trx );

   koinos::protocol::upload_contract_operation op;
   op.set_contract_id( util::converter::as< std::string >( contract_address ) );
   op.set_bytecode( get_koin_wasm() );

   koinos::chain::system_call::apply_upload_contract_operation( ctx, op );

   BOOST_TEST_MESSAGE( "Test executing a contract" );

   ctx.push_frame( chain::stack_frame{ .contract_id = "token_tests"s, .call_privilege = chain::user_mode } );

   auto response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::name, "" ).value();
   auto name = util::converter::to< koinos::contracts::token::name_result >( response );
   LOG(info) << name.value();

   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::symbol, "" ).value();
   auto symbol = util::converter::to< koinos::contracts::token::symbol_result >( response );
   LOG(info) << symbol.value();

   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::decimals, "" ).value();
   auto decimals = util::converter::to< koinos::contracts::token::decimals_result >( response );
   LOG(info) << decimals.value();

   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::total_supply, "" ).value();
   auto supply = util::converter::to< koinos::contracts::token::total_supply_result >( response );
   LOG(info) << "KOIN supply: " << supply.value();

   auto alice_private_key = crypto::private_key::regenerate( koinos::crypto::hash( koinos::crypto::multicodec::sha2_256, "alice"s ) );
   auto alice_address = alice_private_key.get_public_key().to_address_bytes();

   auto bob_private_key = crypto::private_key::regenerate( koinos::crypto::hash( koinos::crypto::multicodec::sha2_256, "bob"s ) );
   auto bob_address = bob_private_key.get_public_key().to_address_bytes();

   koinos::contracts::token::balance_of_arguments balance_of_args;
   balance_of_args.set_owner( util::converter::as< std::string >( alice_address ) );
   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::balance_of, util::converter::as< std::string >( balance_of_args ) ).value();
   auto balance = util::converter::to< koinos::contracts::token::balance_of_result >( response );
   LOG(info) << "'alice' balance: " << balance.value();

   balance_of_args.set_owner( util::converter::as< std::string >( bob_address ) );
   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::balance_of, util::converter::as< std::string >( balance_of_args ) ).value();
   balance = util::converter::to< koinos::contracts::token::balance_of_result >( response );
   LOG(info) << "'bob' balance: " << balance.value();

   auto session = ctx.make_session( 1'000'000 );

   LOG(info) << "Mint to 'alice'";
   koinos::contracts::token::mint_arguments mint_args;
   mint_args.set_to( util::converter::as< std::string >( alice_address ) );
   mint_args.set_value( 100 );

   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::mint, util::converter::as< std::string >( mint_args ) ).value();
   auto success = util::converter::to< koinos::contracts::token::mint_result >( response );
   BOOST_REQUIRE( !success.value() );
   BOOST_CHECK_EQUAL( session->events().size(), 0 );

   session = ctx.make_session( 1'000'000 );

   ctx.set_privilege( chain::privilege::kernel_mode );
   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::mint, util::converter::as< std::string >( mint_args ) ).value();
   success = util::converter::to< koinos::contracts::token::mint_result >( response );
   BOOST_REQUIRE( success.value() );

   BOOST_REQUIRE_EQUAL( session->events().size(), 1 );
   {
      const auto& event = session->events()[0];
      BOOST_CHECK_EQUAL( event.source(), op.contract_id() );
      BOOST_CHECK_EQUAL( event.name(), "koin.mint" );
      BOOST_CHECK_EQUAL( event.impacted().size(), 1 );
      BOOST_CHECK_EQUAL( event.impacted()[0], mint_args.to() );

      auto mint_event = util::converter::to< koinos::contracts::token::mint_event >( event.data() );
      BOOST_CHECK_EQUAL( mint_event.to(), mint_args.to() );
      BOOST_CHECK_EQUAL( mint_event.value(), mint_args.value() );
   }

   ctx.set_privilege( chain::privilege::user_mode );
   balance_of_args.set_owner( util::converter::as< std::string >( alice_address ) );
   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::balance_of, util::converter::as< std::string >( balance_of_args ) ).value();
   balance = util::converter::to< koinos::contracts::token::balance_of_result >( response );

   LOG(info) << "'alice' balance: " << balance.value();

   balance_of_args.set_owner( util::converter::as< std::string >( bob_address ) );
   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::balance_of, util::converter::as< std::string >( balance_of_args ) ).value();
   balance = util::converter::to< koinos::contracts::token::balance_of_result >( response );

   LOG(info) << "'bob' balance: " << balance.value();

   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::total_supply, "" ).value();
   supply = util::converter::to< koinos::contracts::token::total_supply_result >( response );
   LOG(info) << "KOIN supply: " << supply.value();

   LOG(info) << "Transfer from 'alice' to 'bob'";
   koinos::contracts::token::transfer_arguments transfer_args;
   transfer_args.set_from( util::converter::as< std::string >( alice_address ) );
   transfer_args.set_to( util::converter::as< std::string >( bob_address ) );
   transfer_args.set_value( 25 );

   ctx.set_transaction( trx );
   try
   {
      session = ctx.make_session( 1'000'000 );
      koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::transfer, util::converter::as< std::string >( transfer_args ) ).value();
      BOOST_FAIL( "Expected invalid signature exception" );
   }
   catch ( const koinos::chain::authorization_failed& ) {}

   sign_transaction( trx, bob_private_key );
   ctx.set_transaction( trx );

   try
   {
      session = ctx.make_session( 1'000'000 );
      koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::transfer, util::converter::as< std::string >( transfer_args ) ).value();
      BOOST_FAIL( "Expected invalid signature exception" );
   }
   catch ( const koinos::chain::authorization_failed& ) {}

   sign_transaction( trx, alice_private_key );
   ctx.set_transaction( trx );

   session = ctx.make_session( 1'000'000 );
   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::transfer, util::converter::as< std::string >( transfer_args ) ).value();
   auto xfer_result = util::converter::to< koinos::contracts::token::transfer_result >( response );
   BOOST_REQUIRE( xfer_result.value() );

   balance_of_args.set_owner( util::converter::as< std::string >( alice_address ) );
   session = ctx.make_session( 1'000'000 );
   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::balance_of, util::converter::as< std::string >( balance_of_args ) ).value();
   balance = util::converter::to< koinos::contracts::token::balance_of_result >( response );

   LOG(info) << "'alice' balance: " << balance.value();

   balance_of_args.set_owner( util::converter::as< std::string >( bob_address ) );
   session = ctx.make_session( 1'000'000 );
   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::balance_of, util::converter::as< std::string >( balance_of_args ) ).value();
   balance = util::converter::to< koinos::contracts::token::balance_of_result >( response );

   LOG(info) << "'bob' balance: " << balance.value();

   session = ctx.make_session( 1'000'000 );
   response = koinos::chain::system_call::call( ctx, op.contract_id(), token_entry::total_supply, "" ).value();
   supply = util::converter::to< koinos::contracts::token::total_supply_result >( response );
   LOG(info) << "KOIN supply: " << supply.value();
}
catch( const koinos::vm_manager::vm_exception& e )
{
   LOG(info) << e.what();
   BOOST_FAIL("VM Exception");
}
KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( tick_limit )
{ try {
   using namespace koinos;
   BOOST_TEST_MESSAGE( "Upload forever contract" );

   auto contract_private_key = koinos::crypto::private_key::regenerate( koinos::crypto::hash( koinos::crypto::multicodec::sha2_256, "contract"s ) );
   protocol::transaction trx;
   sign_transaction( trx, contract_private_key );
   ctx.set_transaction( trx );

   protocol::upload_contract_operation op;
   op.set_contract_id( util::converter::as< std::string >( contract_private_key.get_public_key().to_address_bytes() ) );
   op.set_bytecode( get_forever_wasm() );

   chain::system_call::apply_upload_contract_operation( ctx, op );

   auto bytecode_object = koinos::chain::system_call::get_object( ctx, koinos::chain::state::space::contract_bytecode(), op.contract_id() );
   auto meta = util::converter::to< koinos::chain::contract_metadata_object >( koinos::chain::system_call::get_object( ctx, koinos::chain::state::space::contract_metadata(), op.contract_id() ).value() );

   BOOST_REQUIRE( bytecode_object.exists() );
   BOOST_REQUIRE( bytecode_object.value().size() == op.bytecode().size() );
   BOOST_REQUIRE( std::memcmp( bytecode_object.value().c_str(), op.bytecode().c_str(), op.bytecode().size() ) == 0 );
   BOOST_REQUIRE( meta.hash() == util::converter::as< std::string >( koinos::crypto::hash( koinos::crypto::multicodec::sha2_256, bytecode_object.value() ) ) );

   koinos::protocol::call_contract_operation op2;
   op2.set_contract_id( op.contract_id() );

   BOOST_TEST_MESSAGE( "Execute forever contract inside a session" );

   auto compute_bandwidth_remaining = ctx.resource_meter().compute_bandwidth_remaining();

   auto session = ctx.make_session( 1'000'000 );
   BOOST_REQUIRE_THROW( chain::system_call::apply_call_contract_operation( ctx, op2 ), chain::insufficient_rc );
   BOOST_REQUIRE_EQUAL( session->used_rc(), 1'000'000 );
   BOOST_REQUIRE_EQUAL( session->remaining_rc(), 0 );
   session.reset();

   BOOST_REQUIRE_EQUAL( ctx.resource_meter().compute_bandwidth_remaining(), compute_bandwidth_remaining - 1'000'000 );

   // We lower the compute bandwidth block-wide so the test doesn't take long
   auto rl = chain::system_call::get_resource_limits( ctx );
   rl.set_compute_bandwidth_limit( 1'000'000 );
   ctx.resource_meter().set_resource_limit_data( rl );

   BOOST_TEST_MESSAGE( "Execute forever contract outside a session" );
   BOOST_REQUIRE_THROW( chain::system_call::apply_call_contract_operation( ctx, op2 ), chain::compute_bandwidth_limit_exceeded );

   BOOST_REQUIRE_EQUAL( ctx.resource_meter().compute_bandwidth_remaining(), 0 );

} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( transaction_reversion )
{ try {
   using namespace koinos;

   BOOST_TEST_MESSAGE( "Upload KOIN contract for testing and set balance for 'alice'" );

   auto alice_private_key = crypto::private_key::regenerate( koinos::crypto::hash( koinos::crypto::multicodec::sha2_256, "alice"s ) );
   auto alice_address = alice_private_key.get_public_key().to_address_bytes();

   auto bob_private_key = crypto::private_key::regenerate( koinos::crypto::hash( koinos::crypto::multicodec::sha2_256, "bob"s ) );
   auto bob_address = bob_private_key.get_public_key().to_address_bytes();

   auto contract_private_key = crypto::private_key::regenerate( crypto::hash( koinos::crypto::multicodec::sha2_256, "token_contract"s ) );
   auto contract_address = contract_private_key.get_public_key().to_address_bytes();

   BOOST_TEST_MESSAGE( "Test a reverted transaction" );

   // This is purposefully calling on a non-existent contract, which will result in a reversion
   protocol::call_contract_operation call_op;
   call_op.set_contract_id( contract_address );

   protocol::transaction transaction;
   chain::value_type nonce_value;
   nonce_value.set_uint64_value( 1 );
   transaction.mutable_header()->set_rc_limit( 1'000'000 );
   transaction.mutable_header()->set_nonce( util::converter::as< std::string >( nonce_value ) );
   transaction.mutable_header()->set_chain_id( chain::system_call::get_object( ctx, chain::state::space::metadata(), chain::state::key::chain_id ).value() );
   *transaction.add_operations()->mutable_call_contract() = call_op;
   set_transaction_merkle_roots( transaction, crypto::multicodec::sha2_256 );
   sign_transaction( transaction, alice_private_key );

   const auto head_state_node = db.get_head();
   auto control_state_node = db.create_writable_node( head_state_node->id(), crypto::hash( crypto::multicodec::sha2_256, "control"s ) );
   auto trx_state_node = db.create_writable_node( head_state_node->id(), crypto::hash( crypto::multicodec::sha2_256, "transaction"s ) );

   auto session = ctx.make_session( 1'000'000 );

   ctx.set_intent( chain::intent::transaction_application );

   ctx.set_state_node( trx_state_node );
   BOOST_REQUIRE_THROW( chain::system_call::apply_transaction( ctx, transaction ), chain::transaction_reverted );
   db.finalize_node( trx_state_node->id() );

   ctx.set_state_node( control_state_node );
   chain::system_call::set_account_nonce( ctx, transaction.header().payer(), transaction.header().nonce() );
   db.finalize_node( control_state_node->id() );

   BOOST_REQUIRE( trx_state_node->get_merkle_root() == control_state_node->get_merkle_root() );

   BOOST_TEST_MESSAGE( "Test proper throwing when transaction is not reverted" );

   transaction.mutable_header()->set_rc_limit( 10'000'001 );
   sign_transaction( transaction, alice_private_key );

   auto failed_trx_state_node = db.create_writable_node( head_state_node->id(), crypto::hash( crypto::multicodec::sha2_256, "failed_trx"s ) );
   ctx.set_state_node( failed_trx_state_node );

   try
   {
      chain::system_call::apply_transaction( ctx, transaction );
      BOOST_FAIL( "expected exception not thrown" );
   }
   catch ( chain::transaction_reverted& )
   {
      BOOST_FAIL( "transaction_reverted exception erroneously thrown" );
   }
   catch ( koinos::exception& e ) { /* pass */ }

   BOOST_TEST_MESSAGE( "Submitting failing transaction within a block" );

   auto parent_node = db.get_node( crypto::multihash::zero( crypto::multicodec::sha2_256 ) );
   protocol::block block;
   block.mutable_header()->set_previous( util::converter::as< std::string >( crypto::multihash::zero( crypto::multicodec::sha2_256 ) ) );
   block.mutable_header()->set_height( 1 );
   block.mutable_header()->set_timestamp( std::chrono::duration_cast< std::chrono::milliseconds >( std::chrono::system_clock::now().time_since_epoch() ).count() );
   block.mutable_header()->set_previous_state_merkle_root( util::converter::as< std::string >( parent_node->get_merkle_root() ) );
   *block.add_transactions() = transaction;
   set_block_merkle_roots( block, crypto::multicodec::sha2_256 );
   block.mutable_header()->set_signer( _signing_private_key.get_public_key().to_address_bytes() );
   block.set_id( util::converter::as< std::string >( crypto::hash( crypto::multicodec::sha2_256, block.header() ) ) );
   block.set_signature( util::converter::as< std::string >( _signing_private_key.sign_compact( util::converter::to< crypto::multihash >( block.id() ) ) ) );

   auto block_state_node = db.create_writable_node( head_state_node->id(), crypto::hash( crypto::multicodec::sha2_256, "block"s ) );
   ctx.set_state_node( block_state_node );
   ctx.set_intent( chain::intent::block_application );

   try
   {
      chain::system_call::apply_block( ctx, block );
      BOOST_FAIL( "expected exception not thrown" );
   }
   catch ( chain::transaction_reverted& )
   {
      BOOST_FAIL( "transaction_reverted exception erroneously thrown" );
   }
   catch ( koinos::exception& e )
   {
      const auto& data = e.get_json();

      BOOST_REQUIRE( data.count( "transaction_id" ) );
      BOOST_REQUIRE_EQUAL( data[ "transaction_id" ], util::to_hex( transaction.id() ) );
   }

   BOOST_TEST_MESSAGE( "Submitting reverted transactioon within a block" );

   transaction.mutable_header()->set_rc_limit( 1'000'000 );
   sign_transaction( transaction, alice_private_key );
   block.clear_transactions();
   *block.add_transactions() = transaction;
   set_block_merkle_roots( block, crypto::multicodec::sha2_256 );
   block.set_id( util::converter::as< std::string >( crypto::hash( crypto::multicodec::sha2_256, block.header() ) ) );
   block.set_signature( util::converter::as< std::string >( _signing_private_key.sign_compact( util::converter::to< crypto::multihash >( block.id() ) ) ) );

   db.discard_node( block_state_node->id() );
   block_state_node = db.create_writable_node( head_state_node->id(), crypto::hash( crypto::multicodec::sha2_256, "block"s ) );
   ctx.set_state_node( block_state_node );

   chain::system_call::apply_block( ctx, block );

} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_CASE( authorize_tests )
{
   using namespace koinos;

   auto key_a = koinos::crypto::private_key::regenerate( koinos::crypto::hash( koinos::crypto::multicodec::sha2_256, "test_key_a"s ) );
   auto key_b = koinos::crypto::private_key::regenerate( koinos::crypto::hash( koinos::crypto::multicodec::sha2_256, "test_key_b"s ) );

   // Upload KOIN contract
   auto contract_private_key = crypto::private_key::regenerate( crypto::hash( koinos::crypto::multicodec::sha2_256, "token_contract"s ) );
   auto contract_address = contract_private_key.get_public_key().to_address_bytes();
   protocol::transaction trx;
   chain::value_type nonce_value;
   nonce_value.set_uint64_value( 1 );
   trx.mutable_header()->set_nonce( util::converter::as< std::string >( nonce_value ) );
   sign_transaction( trx, contract_private_key );
   ctx.set_transaction( trx );

   koinos::protocol::upload_contract_operation upload_op;
   upload_op.set_contract_id( util::converter::as< std::string >( contract_address ) );
   upload_op.set_bytecode( get_koin_wasm() );

   koinos::chain::system_call::apply_upload_contract_operation( ctx, upload_op );

   // Mint to key_a
   koinos::contracts::token::mint_arguments mint_args;
   mint_args.set_to( util::converter::as< std::string >( key_a.get_public_key().to_address_bytes() ) );
   mint_args.set_value( 100 );

   auto session = ctx.make_session( 100'000'000 );

   auto response = koinos::chain::system_call::call( ctx, upload_op.contract_id(), token_entry::mint, util::converter::as< std::string >( mint_args ) ).value();
   auto success = util::converter::to< koinos::contracts::token::mint_result >( response );
   BOOST_REQUIRE( success.value() );

   BOOST_TEST_MESSAGE( "Override authorize call contract" );
   upload_op.set_contract_id( key_a.get_public_key().to_address_bytes() );
   upload_op.set_bytecode( get_authorize_wasm() );
   upload_op.set_authorizes_call_contract( true );

   sign_transaction( trx, key_a );
   ctx.set_transaction( trx );

   koinos::chain::system_call::apply_upload_contract_operation( ctx, upload_op );

   BOOST_TEST_MESSAGE( "Transfer from 'a' to 'b'" );
   koinos::contracts::token::transfer_arguments transfer_args;
   transfer_args.set_from( util::converter::as< std::string >( key_a.get_public_key().to_address_bytes() ) );
   transfer_args.set_to( util::converter::as< std::string >( key_b.get_public_key().to_address_bytes() ) );
   transfer_args.set_value( 25 );

   sign_transaction( trx, key_a );

   try
   {
      koinos::chain::system_call::call( ctx, util::converter::as< std::string >( contract_address ), token_entry::transfer, util::converter::as< std::string >( transfer_args ) ).value();
      BOOST_FAIL( "Expected invalid signature" );
   }
   catch ( const koinos::chain::authorization_failed& ) {}

   sign_transaction( trx, key_b );
   koinos::chain::system_call::call( ctx, util::converter::as< std::string >( contract_address ), token_entry::transfer, util::converter::as< std::string >( transfer_args ) ).value();
   BOOST_TEST_PASSPOINT();

   BOOST_TEST_MESSAGE( "Override authorize upload contract" );

   upload_op.set_authorizes_upload_contract( true );
   upload_op.set_authorizes_call_contract( false );

   sign_transaction( trx, key_a );

   koinos::chain::system_call::apply_upload_contract_operation( ctx, upload_op );

   koinos::chain::system_call::call( ctx, util::converter::as< std::string >( contract_address ), token_entry::transfer, util::converter::as< std::string >( transfer_args ) ).value();

   upload_op.set_authorizes_upload_contract( false );
   upload_op.set_authorizes_transaction_application( true );

   try
   {
      koinos::chain::system_call::apply_upload_contract_operation( ctx, upload_op );
      BOOST_FAIL( "Expected invalid signature" );
   }
   catch ( const koinos::chain::authorization_failed& ) {}

   sign_transaction( trx, key_b );
   koinos::chain::system_call::apply_upload_contract_operation( ctx, upload_op );
   BOOST_TEST_PASSPOINT();

   BOOST_TEST_MESSAGE( "Override authorize use rc" );

   ctx.set_intent( koinos::chain::intent::transaction_application );
   auto op = trx.add_operations()->mutable_call_contract();
   op->set_contract_id( util::converter::as< std::string >( contract_address ) );
   op->set_entry_point( token_entry::transfer );
   op->set_args( util::converter::as< std::string >( transfer_args ) );
   set_transaction_merkle_roots( trx, koinos::crypto::multicodec::sha2_256 );
   trx.mutable_header()->set_chain_id( koinos::chain::system_call::get_object( ctx, koinos::chain::state::space::metadata(), koinos::chain::state::key::chain_id ).value() );
   trx.mutable_header()->set_payer( key_a.get_public_key().to_address_bytes() );
   trx.mutable_header()->set_rc_limit( 10'000'000 );
   auto id_mh = crypto::hash( crypto::multicodec::sha2_256, trx.header() );
   trx.set_id( util::converter::as< std::string >( id_mh ) );
   trx.clear_signatures();
   trx.add_signatures( util::converter::as< std::string >( key_a.sign_compact( id_mh ) ) );

   try
   {
      koinos::chain::system_call::apply_transaction( ctx, trx );
      BOOST_FAIL( "Expected invalid signature" );
   }
   catch( const koinos::chain::authorization_failed& ) {}

   trx.add_signatures( util::converter::as< std::string >( key_b.sign_compact( id_mh ) ) );

   koinos::chain::system_call::apply_transaction( ctx, trx );
}

BOOST_AUTO_TEST_CASE( get_chain_id )
{
   auto chain_id = crypto::hash( koinos::crypto::multicodec::sha2_256, _genesis_data );
   auto chain_id_str = util::converter::as< std::string >( chain_id );
   BOOST_REQUIRE_EQUAL( chain_id_str, chain::system_call::get_chain_id( ctx ) );
}

BOOST_AUTO_TEST_CASE( thunk_time )
{ try {
   crypto::multihash contract_seed = crypto::hash( crypto::multicodec::sha2_256, std::string{ "contract" } );
   crypto::private_key contract_pk = crypto::private_key::regenerate( contract_seed );

/*
   #include <cstdint>
   #include <string>
   #include <koinos/system/system_calls.hpp>

   int main()
   {
      uint64_t accumulator = 0;
      for ( uint64_t i = 0; i < 10'000; i++ )
      {
          if ( i % 3 )
             accumulator += 3;
          else if ( i % 2 )
             accumulator += 2;
          else
              accumulator += 1;
      }

      std::string s = std::to_string( accumulator );
      invoke_system_call( 605, nullptr, 0, s.data(), s.size() );

      return 0;
   }
*/
   std::string contract_bytecode = util::from_hex< std::string >( "" );

   protocol::upload_contract_operation op;
   op.set_bytecode( contract_bytecode );
   op.set_contract_id( contract_pk.get_public_key().to_address_bytes() );

   crypto::multihash empty_contract_seed = crypto::hash( crypto::multicodec::sha2_256, std::string{ "empty_contract" } );
   crypto::private_key empty_contract_pk = crypto::private_key::regenerate( empty_contract_seed );

/*
#include <cstdint>
#include <string>
#include <koinos/system/system_calls.hpp>

int main()
{
   return 0;
}
*/
   std::string empty_contract_bytecode = util::from_hex< std::string >( "0x0061736d0100000001150460057f7f7f7f7f017f6000006000017f60017f00021a0103656e7612696e766f6b655f73797374656d5f63616c6c000003090801010201010203030405017001010105030100020608017f01418088040b071302066d656d6f72790200065f737461727400020a96010802000b2901017f108180808000108380808000210010858080800002402000450d002000108880808000000b0b08001086808080000b02000b0e001084808080001084808080000b040041000b3b01017f23808080800041106b2201248080808000200141083a000e200120004100473a000f4111410041002001410e6a41021080808080001a000b0b002000108780808000000b" );

   protocol::upload_contract_operation empty_contract_op;
   empty_contract_op.set_bytecode( empty_contract_bytecode );
   empty_contract_op.set_contract_id( empty_contract_pk.get_public_key().to_address_bytes() );

   protocol::transaction trx;
   sign_transaction( trx, contract_pk );
   auto trx_id = crypto::hash( crypto::multicodec::sha2_256, trx.header() );
   trx.add_signatures( util::converter::as< std::string >( empty_contract_pk.sign_compact( trx_id ) ) );
   trx.add_signatures( util::converter::as< std::string >( _signing_private_key.sign_compact( trx_id ) ) );
   ctx.set_transaction( trx );


   protocol::block b;
   b.mutable_header()->set_height( 10 );
   auto id_mh = crypto::hash( crypto::multicodec::sha2_256, b.header() );
   b.set_id( util::converter::as< std::string >( id_mh ) );
   b.set_signature( util::converter::as< std::string >( contract_pk.sign_compact( id_mh ) ) );
   ctx.set_block( b );

   chain::system_call::apply_upload_contract_operation( ctx, op );

   chain::system_call::apply_upload_contract_operation( ctx, empty_contract_op );

   protocol::set_system_contract_operation ssconp;
   ssconp.set_contract_id( empty_contract_pk.get_public_key().to_address_bytes() );
   ssconp.set_system_contract( true );

   chain::system_call::apply_set_system_contract_operation( ctx, ssconp );

   LOG(info) << "benchmark contract key: " << util::to_base58( contract_pk.get_public_key().to_address_bytes() );
   LOG(info) << "empty contract key: " << util::to_base58( empty_contract_pk.get_public_key().to_address_bytes() );

   const uint64_t global_run = 100;
   std::vector< double > benchmarks;

   LOG(info) << "Calibrating compute from smart contract benchmark...";

   for ( uint64_t i = 0; i < global_run; i++ )
   {
      try
      {
         ctx.resource_meter().set_resource_limit_data( chain::system_call::get_resource_limits( ctx ) );
         auto session = ctx.make_session( 1'000'000 );

         uint64_t compute_bandwidth_start = ctx.resource_meter().compute_bandwidth_used();
         uint64_t network_bandwidth_start = ctx.resource_meter().network_bandwidth_used();
         uint64_t disk_storage_start      = ctx.resource_meter().disk_storage_used();

         chain::host_api hapi( ctx );
         auto hash = util::converter::as< std::string >( crypto::multihash::empty( crypto::multicodec::sha2_256 ) );

         auto start = std::chrono::high_resolution_clock::now();
         try
         {
            ctx.get_backend()->run( hapi, contract_bytecode, hash );
         }
         catch ( chain::exit_success& ) {}
         auto stop = std::chrono::high_resolution_clock::now();

         uint64_t compute_bandwidth_stop = ctx.resource_meter().compute_bandwidth_used();
         uint64_t network_bandwidth_stop = ctx.resource_meter().network_bandwidth_used();
         uint64_t disk_storage_stop      = ctx.resource_meter().disk_storage_used();

         uint64_t compute_used = compute_bandwidth_stop - compute_bandwidth_start;
         uint64_t network_used = network_bandwidth_stop - network_bandwidth_start;
         uint64_t disk_used = disk_storage_stop - disk_storage_start;

         auto duration = std::chrono::duration_cast< std::chrono::nanoseconds >( stop - start );
         //LOG(info) << "benchmark contract took: " << duration.count() << "us";
         //LOG(info) << " -> compute: " << compute_used;
         //LOG(info) << " -> network: " << network_used;
         //LOG(info) << " -> disk: " << disk_used;
         benchmarks.push_back( compute_used / double( duration.count() ) );
         //LOG(info) << " -> approximate nanoseconds per compute: " << compute_used / double( duration.count() );
      }
      catch ( const koinos::exception& e )
      {
         LOG(error) << "Error: " << e.what();
      }
   }

   auto mean = []( const std::vector< double >& v ) -> double {
      double sum = 0;
      for ( const auto& e : v )
         sum += e;

      return sum / v.size();
   };

   auto median = []( std::vector< double > v ) -> double {
      std::sort( v.begin(), v.end() );
      if ( v.size() % 2 == 0 )
         return ( v[ v.size() / 2 - 1 ] + v[ v.size() / 2 ] ) / 2;
      return v[ v.size() / 2 ];
   };

   auto mode = []( std::vector< double > v ) -> double {
      std::sort( v.begin(), v.end() );

      double max_count = 1, res = v[ 0 ], count = 1;
      for ( int i = 1; i < v.size(); i++ )
      {
         if ( v[i] == v[ i - 1 ] )
         {
            count++;
         }
         else {
            if ( count > max_count )
            {
               max_count = count;
               res = v[i - 1];
            }
            count = 1;
         }
      }

      if ( count > max_count )
      {
         max_count = count;
         res = v[ v.size() - 1 ];
      }

      return res;
   };

   LOG(info) << "mean: " << mean( benchmarks );
   LOG(info) << "median: " << median( benchmarks );
   LOG(info) << "mode: " << mode( benchmarks );
   LOG(info) << "min: " << *std::min_element( benchmarks.begin(), benchmarks.end() );
   LOG(info) << "max: " << *std::max_element( benchmarks.begin(), benchmarks.end() );

   double compute_per_nanosecond = mean( benchmarks );

   std::map< std::string, uint64_t > calls;
   auto timer = [&]( const std::string& name, std::function< void(void) > call, std::function< void(void) > pre = [](){}, std::function< void(void) > post = [](){} )
   {
      LOG(info) << "Testing " << name << "...";

      uint64_t total_time = 0;
      uint64_t runs = global_run;

      for ( uint64_t i = 0; i < runs; i++ )
      {
         try
         {
            ctx.resource_meter().set_resource_limit_data( chain::system_call::get_resource_limits( ctx ) );
            auto session = ctx.make_session( 1'000'000 );
            pre();
            uint64_t compute_bandwidth_start = ctx.resource_meter().compute_bandwidth_used();
            auto start = std::chrono::steady_clock::now();
            call();
            auto stop = std::chrono::steady_clock::now();
            uint64_t compute_bandwidth_stop = ctx.resource_meter().compute_bandwidth_used();
            post();

            uint64_t compute_used = compute_bandwidth_stop - compute_bandwidth_start;
            auto duration = std::chrono::duration_cast< std::chrono::nanoseconds >( stop - start );

            //LOG(info) << "system call: " << name << ", took: " << duration.count() << "ns, actual compute used: " << compute_used << ", proposed compute cost: " << duration.count() / compute_per_nanosecond ;
            total_time += duration.count();
         }
         catch ( const koinos::exception& e )
         {
            LOG(error) << "error: " << e.what();
            throw e;
         }
      }

      calls[ name ] = (total_time + runs - 1) / runs;
   };

   chain::object_space objs;
   objs.set_zone( std::string{ "test" } );
   objs.set_system( true );

   chain::system_call::put_object( ctx, objs, std::string{ "remove_key" }, std::string{ "stuff" } );

   protocol::set_system_call_operation sscop;
   sscop.mutable_target()->mutable_system_call_bundle()->set_contract_id( empty_contract_op.contract_id() );
   sscop.mutable_target()->mutable_system_call_bundle()->set_entry_point( 0x00 );
   sscop.set_call_id( 1000 );

   protocol::call_contract_operation cco;
   cco.set_entry_point( 0x00 );
   cco.set_contract_id( empty_contract_pk.get_public_key().to_address_bytes() );

   auto mtree = crypto::merkle_tree( crypto::multicodec::sha2_256, std::vector< protocol::transaction >{} );

   koinos::chain::value_type nonce_value;
   nonce_value.set_uint64_value( 1 );

   chain::system_call::set_account_nonce( ctx, std::string{ "0x123" }, util::converter::as< std::string >( nonce_value ) );

   protocol::transaction transaction;
   transaction.mutable_header()->set_chain_id( chain::system_call::get_object( ctx, chain::state::space::metadata(), chain::state::key::chain_id ).value() );
   transaction.mutable_header()->set_payer( _signing_private_key.get_public_key().to_address_bytes() );
   transaction.mutable_header()->set_payee( _signing_private_key.get_public_key().to_address_bytes() );
   transaction.mutable_header()->set_rc_limit( 1'000'000 );
   transaction.mutable_header()->set_nonce( util::converter::as< std::string>( nonce_value ) );
   auto operation_merkle_tree = crypto::merkle_tree( crypto::multicodec::sha2_256, std::vector< protocol::operation >{} );
   transaction.mutable_header()->set_operation_merkle_root( util::converter::as< std::string >( operation_merkle_tree.root()->hash() ) );
   trx_id = crypto::hash( crypto::multicodec::sha2_256, transaction.header() );
   transaction.set_id( util::converter::as< std::string >( trx_id ) );
   transaction.add_signatures( util::converter::as< std::string >( contract_pk.sign_compact( trx_id ) ) );
   transaction.add_signatures( util::converter::as< std::string >( empty_contract_pk.sign_compact( trx_id ) ) );
   transaction.add_signatures( util::converter::as< std::string >( _signing_private_key.sign_compact( util::converter::to< crypto::multihash >( transaction.id() ) ) ) );

   auto parent_node = db.get_node( crypto::multihash::zero( crypto::multicodec::sha2_256 ) );
   protocol::block block;
   block.mutable_header()->set_previous( util::converter::as< std::string >( crypto::multihash::zero( crypto::multicodec::sha2_256 ) ) );
   block.mutable_header()->set_height( 1 );
   block.mutable_header()->set_timestamp( std::chrono::duration_cast< std::chrono::milliseconds >( std::chrono::system_clock::now().time_since_epoch() ).count() );
   block.mutable_header()->set_previous_state_merkle_root( util::converter::as< std::string >( parent_node->get_merkle_root() ) );
   auto transaction_merkle_tree = crypto::merkle_tree( crypto::multicodec::sha2_256, std::vector< protocol::transaction >{} );
   block.mutable_header()->set_transaction_merkle_root( util::converter::as< std::string >( transaction_merkle_tree.root()->hash() ) );
   block.mutable_header()->set_signer( _signing_private_key.get_public_key().to_address_bytes() );
   block.set_id( util::converter::as< std::string >( koinos::crypto::hash( crypto::multicodec::sha2_256, block.header() ) ) );
   block.set_signature( util::converter::as< std::string >( _signing_private_key.sign_compact( util::converter::to< crypto::multihash >( block.id() ) ) ) );

   auto header_str = util::converter::as< std::string >( block.header() );
   auto nonce_str = util::converter::as< std::string >( nonce_value );

   std::string message = "test";
   const auto res = _signing_private_key.generate_random_proof( message );
   const auto& proof = res.first;
   const auto& proof_hash = util::converter::as< std::string >( res.second );
   auto serialized_public_key = util::converter::as< std::string >( _signing_private_key.get_public_key() );

   std::map< std::string, std::function< void( void ) > > system_call_map {
      { "check_system_authority", [&]() { chain::system_call::check_system_authority( ctx, chain::set_system_call ); } },
      { "recover_public_key", [&]() { chain::system_call::recover_public_key( ctx, chain::dsa::ecdsa_secp256k1, transaction.signatures( 0 ), transaction.id() ); } },
      { "check_authority", [&]() { chain::system_call::check_authority( ctx, chain::contract_call, transaction.header().payer() ); } },
      { "get_last_irreversible_block", [&]() { chain::system_call::get_last_irreversible_block( ctx ); } },
      { "hash", [&]() { chain::system_call::hash( ctx, std::underlying_type_t< crypto::multicodec >( crypto::multicodec::sha2_256 ), header_str ); } },
      { "get_caller", [&]() { chain::system_call::get_caller( ctx ); } },
      { "get_contract_id", [&]() { chain::system_call::get_contract_id( ctx ); } },
      { "get_account_nonce", [&]() { chain::system_call::get_account_nonce( ctx, transaction.header().payer() ); } },
      { "get_account_rc", [&]() { chain::system_call::get_account_rc( ctx, transaction.header().payer() ); } },
      { "consume_account_rc", [&]() { chain::system_call::consume_account_rc( ctx, transaction.header().payer(), 1 ); } },
      { "get_transaction_field", [&]() { chain::system_call::get_transaction_field( ctx, "header" ); } },
      { "get_block_field", [&]() { chain::system_call::get_block_field( ctx, "header" ); } },
      { "verify_signature", [&]() { chain::system_call::verify_signature( ctx, chain::dsa::ecdsa_secp256k1, trx.signatures( 0 ), trx.signatures( 0 ), trx.id() ); } },
      { "get_resource_limits", [&]() { chain::system_call::get_resource_limits( ctx ); } },
      { "consume_block_resources", [&]() { chain::system_call::consume_block_resources( ctx, 1, 1, 1 ); } },
      { "log", [&]() { chain::system_call::log( ctx, "message" ); } },
      { "exit", [&]() { try { chain::system_call::exit( ctx, chain::result() ); } catch ( ... ) {} } },
      { "process_block_signature", [&]() { chain::system_call::process_block_signature( ctx, block.id(), block.header(), block.signature() ); } },
      { "get_entry_point", [&]() { chain::system_call::get_entry_point( ctx ); } },
      { "get_arguments", [&] { chain::system_call::get_arguments( ctx ); } },
      { "put_object", [&]() { chain::system_call::put_object( ctx, objs, std::string{ "key" }, header_str ); } },
      { "get_object", [&]() { chain::system_call::get_object( ctx, objs, std::string{ "key" } ); } },
      { "get_next_object", [&]() { chain::system_call::get_next_object( ctx, objs, std::string{ "key" } ); } },
      { "get_prev_object", [&]() { chain::system_call::get_prev_object( ctx, objs, std::string{ "key" } ); } },
      { "call_contract", [&]() { chain::system_call::call( ctx, empty_contract_op.contract_id(), 0x00, empty_contract_op.bytecode() ); } },
      { "apply_set_system_call_operation", [&]() { chain::system_call::apply_set_system_call_operation( ctx, sscop ); } },
      { "apply_set_system_contract_operation", [&]() { chain::system_call::apply_set_system_contract_operation( ctx, ssconp ); } },
      { "apply_call_contract_operation", [&]() { chain::system_call::apply_call_contract_operation( ctx, cco ); } },
      { "get_transaction", [&]() { chain::system_call::get_transaction( ctx ); } },
      { "get_block", [&]() { chain::system_call::get_block( ctx ); } },
      { "get_head_info", [&]() { chain::system_call::get_head_info( ctx ); } },
      { "remove_object", [&]() { chain::system_call::remove_object( ctx, objs, std::string{ "remove_key" } ); } },
      { "pre_transaction_callback", [&]() { chain::system_call::pre_transaction_callback( ctx ); } },
      { "post_transaction_callback", [&]() { chain::system_call::post_transaction_callback( ctx ); } },
      { "pre_block_callback", [&]() { chain::system_call::pre_block_callback( ctx ); } },
      { "post_block_callback", [&]() { chain::system_call::post_block_callback( ctx ); } },
      { "verify_account_nonce", [&]() { chain::system_call::verify_account_nonce( ctx, std::string{ "0x123" }, nonce_str ); } },
      { "set_account_nonce", [&]() { chain::system_call::set_account_nonce( ctx, std::string{ "0x123" }, nonce_str ); } },
      { "verify_vrf_proof", [&]() { chain::system_call::verify_vrf_proof( ctx, chain::dsa::ecdsa_secp256k1, serialized_public_key, proof, proof_hash, message ); } },
      { "get_chain_id", [&]() { chain::system_call::get_chain_id( ctx ); } }
   };

   for ( const auto& [ name, call ] : system_call_map )
      timer( name, call );

   ctx.clear_block();
   ctx.clear_transaction();
   ctx.set_transaction( transaction );

   ctx.set_intent( chain::intent::transaction_application );
   timer( "apply_transaction",
      [&]()
      {
         chain::system_call::apply_transaction( ctx, transaction );
      },
      [&]()
      {
         transaction.mutable_header()->set_nonce( util::converter::as< std::string>( nonce_value ) );
         operation_merkle_tree = crypto::merkle_tree( crypto::multicodec::sha2_256, std::vector< protocol::operation >{} );
         transaction.mutable_header()->set_operation_merkle_root( util::converter::as< std::string >( operation_merkle_tree.root()->hash() ) );
         trx_id = crypto::hash( crypto::multicodec::sha2_256, transaction.header() );
         transaction.set_id( util::converter::as< std::string >( trx_id ) );
         transaction.clear_signatures();
         transaction.add_signatures( util::converter::as< std::string >( contract_pk.sign_compact( trx_id ) ) );
         transaction.add_signatures( util::converter::as< std::string >( empty_contract_pk.sign_compact( trx_id ) ) );
         transaction.add_signatures( util::converter::as< std::string >( _signing_private_key.sign_compact( util::converter::to< crypto::multihash >( transaction.id() ) ) ) );
      },
      [&]()
      {
         nonce_value.set_uint64_value( nonce_value.uint64_value() + 1 );
      }
   );

   nonce_value.set_uint64_value( 1 );

   transaction.mutable_header()->set_nonce( util::converter::as< std::string>( nonce_value ) );
   operation_merkle_tree = crypto::merkle_tree( crypto::multicodec::sha2_256, std::vector< protocol::operation >{} );
   transaction.mutable_header()->set_operation_merkle_root( util::converter::as< std::string >( operation_merkle_tree.root()->hash() ) );
   trx_id = crypto::hash( crypto::multicodec::sha2_256, transaction.header() );
   transaction.set_id( util::converter::as< std::string >( trx_id ) );
   transaction.clear_signatures();
   transaction.add_signatures( util::converter::as< std::string >( contract_pk.sign_compact( trx_id ) ) );
   transaction.add_signatures( util::converter::as< std::string >( _signing_private_key.sign_compact( util::converter::to< crypto::multihash >( transaction.id() ) ) ) );
   transaction.add_signatures( util::converter::as< std::string >( empty_contract_pk.sign_compact( trx_id ) ) );
   ctx.set_transaction( transaction );

   timer( "apply_upload_contract_operation", [&](){ chain::system_call::apply_upload_contract_operation( ctx, empty_contract_op ); } );

   ctx.resource_meter().set_resource_limit_data( chain::system_call::get_resource_limits( ctx ) );

   ctx.set_intent( chain::intent::block_application );
   timer( "apply_block", [&]() { chain::system_call::apply_block( ctx, block ); } );

   std::fstream rand_stream( "/dev/random", std::ios_base::in );

   auto create_random_payload = [&]( uint64_t payload_size ) -> std::string {
      std::string res( payload_size, 0x00 );
      rand_stream.read( const_cast< char* >( res.data() ), payload_size );
      BOOST_REQUIRE_EQUAL( payload_size, res.size() );
      return res;
   };

   auto lin_reg = []( const std::vector< uint64_t >& x_points, const std::vector< uint64_t >& y_points ) -> std::pair< double, double > {
      double x_mean = std::accumulate( std::begin( x_points ), std::end( x_points ), 0 ) / double( x_points.size() );
      double y_mean = std::accumulate( std::begin( y_points ), std::end( y_points ), 0 ) / double( y_points.size() );
      double ss_xy = 0;
      double ss_xx = 0;

      {
         std::vector< uint64_t > xy;
         for( std::size_t i = 0; i < x_points.size(); i++ )
         {
            xy.push_back( x_points[i] * y_points[i] );
         }

         ss_xy = std::accumulate( std::begin( xy ), std::end( xy ), 0 ) - ( x_points.size() * x_mean * y_mean );
      }

      {
         std::vector< uint64_t > xx;

         for( std::size_t i = 0; i < x_points.size(); i++ )
         {
            xx.push_back( x_points[i] * x_points[i] );
         }

         ss_xx = std::accumulate( std::begin( xx ), std::end( xx ), 0 ) - ( x_points.size() * x_mean * x_mean );
      }

      double b_1 = double( ss_xy ) / ss_xx;
      double b_0 = y_mean - ( b_1 * x_mean );
      return { b_0, b_1 };
   };

   auto sample_hash_algorithm = [&]( koinos::crypto::multicodec code ) -> std::pair< std::vector< uint64_t >, std::vector< uint64_t > > {
      std::vector< uint64_t > payload_sizes;
      std::vector< uint64_t > hash_times;

      chain::resource_limit_data rld;
      rld.set_compute_bandwidth_limit( 1'000'000'000 );

      ctx.resource_meter().set_resource_limit_data( rld );
      auto session = ctx.make_session( 1'000'000'000 );

      uint64_t runs = std::max( uint64_t( 1 ), global_run / 1000 );

      for ( int i = 0; i < 1024; i += 4 )
      {
         auto payload = create_random_payload( i );

         auto start = std::chrono::steady_clock::now();
         for ( int i = 0; i < runs; i++ )
         {
            koinos::chain::system_call::hash( ctx, std::underlying_type_t< koinos::crypto::multicodec >( code ), payload );
         }
         auto stop = std::chrono::steady_clock::now();

         payload_sizes.push_back( payload.size() );
         hash_times.push_back( std::chrono::duration_cast< std::chrono::nanoseconds >( stop - start ).count() / runs );
      }

      return { payload_sizes, hash_times };
   };

   {
      LOG(info) << "Testing sha1...";
      auto [payload_sizes, hash_times] = sample_hash_algorithm( koinos::crypto::multicodec::sha1 );
      auto [b_0, b_1] = lin_reg( payload_sizes, hash_times );
      calls[ "sha1_base" ] = std::max( int64_t(1), int64_t( ceil( b_0 ) ) );
      calls[ "sha1_per_byte" ] = std::max( int64_t(1), int64_t( ceil( b_1 ) ) );
   }

   {
      LOG(info) << "Testing sha2_256...";
      auto [payload_sizes, hash_times] = sample_hash_algorithm( koinos::crypto::multicodec::sha2_256 );
      auto [b_0, b_1] = lin_reg( payload_sizes, hash_times );
      calls[ "sha2_256_base" ] = std::max( int64_t(1), int64_t( ceil( b_0 ) ) );
      calls[ "sha2_256_per_byte" ] = std::max( int64_t(1), int64_t( ceil( b_1 ) ) );
   }

   {
      LOG(info) << "Testing sha2_512...";
      auto [payload_sizes, hash_times] = sample_hash_algorithm( koinos::crypto::multicodec::sha2_512 );
      auto [b_0, b_1] = lin_reg( payload_sizes, hash_times );
      calls[ "sha2_512_base" ] = std::max( int64_t(1), int64_t( ceil( b_0 ) ) );
      calls[ "sha2_512_per_byte" ] = std::max( int64_t(1), int64_t( ceil( b_1 ) ) );
   }

   {
      LOG(info) << "Testing keccak_256...";
      auto [payload_sizes, hash_times] = sample_hash_algorithm( koinos::crypto::multicodec::keccak_256 );
      auto [b_0, b_1] = lin_reg( payload_sizes, hash_times );
      calls[ "keccak_256_base" ] = std::max( int64_t(1), int64_t( ceil( b_0 ) ) );
      calls[ "keccak_256_per_byte" ] = std::max( int64_t(1), int64_t( ceil( b_1 ) ) );
   }

   {
      LOG(info) << "Testing ripemd_160...";
      auto [payload_sizes, hash_times] = sample_hash_algorithm( koinos::crypto::multicodec::ripemd_160 );
      auto [b_0, b_1] = lin_reg( payload_sizes, hash_times );
      calls[ "ripemd_160_base" ] = std::max( int64_t(1), int64_t( ceil( b_0 ) ) );
      calls[ "ripemd_160_per_byte" ] = std::max( int64_t(1), int64_t( ceil( b_1 ) ) );
   }

   {
      LOG(info) << "Testing event...";

      std::vector< uint64_t > payload_sizes;
      std::vector< uint64_t > event_times;

      auto address = _signing_private_key.get_public_key().to_address_bytes();

      std::vector< std::string > impacted;

      uint64_t runs =  std::max( uint64_t( 1 ), global_run / 50 );

      for ( int i = 0; i < 50; i++ )
      {
         chain::resource_limit_data rld;
         rld.set_compute_bandwidth_limit( 100'000'000 );

         ctx.resource_meter().set_resource_limit_data( rld );
         auto session = ctx.make_session( 100'000'000 );

         auto start = std::chrono::steady_clock::now();

         for ( int j = 0; j < runs; j++ )
         {
            koinos::chain::system_call::event( ctx, "event", address, impacted );
         }

         auto stop = std::chrono::steady_clock::now();

         payload_sizes.push_back( i );
         event_times.push_back( std::chrono::duration_cast< std::chrono::nanoseconds >( stop - start ).count() / runs );

         impacted.push_back( address );
      }

      auto [b_0, b_1] = lin_reg( payload_sizes, event_times );
      calls[ "event" ] = std::max( int64_t(1), int64_t( ceil( b_0 ) ) );
      calls[ "event_per_impacted" ] = std::max( int64_t(1), int64_t( ceil( b_1 ) ) );
   }

   {
      LOG(info) << "Testing deserialize multihash...";

      std::vector< uint64_t > number_of_hashes;
      std::vector< uint64_t > deserialize_times;

      auto address = _signing_private_key.get_public_key().to_address_bytes();

      std::vector< std::string > hashes;

      uint64_t runs = std::max( uint64_t( 1 ), global_run / 20 );

      for ( int i = 0; i < 20; i++ )
      {
         chain::resource_limit_data rld;
         rld.set_compute_bandwidth_limit( 100'000'000 );

         ctx.resource_meter().set_resource_limit_data( rld );
         auto session = ctx.make_session( 100'000'000 );

         auto start = std::chrono::steady_clock::now();
         for ( int j = 0; j < runs; j++ )
         {
            std::vector< crypto::multihash > leaves;
            leaves.resize( hashes.size() );
            std::transform( std::begin( hashes ), std::end( hashes ), std::begin( leaves ), []( const std::string& s ) { return util::converter::to< crypto::multihash >( s ); } );
         }
         auto stop = std::chrono::steady_clock::now();

         number_of_hashes.push_back( i );
         deserialize_times.push_back( std::chrono::duration_cast< std::chrono::nanoseconds >( stop - start ).count() / runs );

         hashes.push_back( util::converter::as< std::string >( crypto::hash( crypto::multicodec::sha2_256, create_random_payload( 32 ) ) ) );
      }

      auto [b_0, b_1] = lin_reg( number_of_hashes, deserialize_times );
      LOG(info) << b_0 << ", " << b_1;
      calls[ "deserialize_multihash_base" ] = std::max( int64_t(1), int64_t( ceil( b_0 ) ) );
      calls[ "deserialize_multihash_per_byte" ] = std::max( int64_t(1), int64_t( ceil( b_1 ) ) );
   }

   {
      LOG(info) << "Testing verify_merkle_root...";

      std::vector< crypto::multihash > merkle_leafs;
      std::vector< std::string > string_leafs;
      for ( std::size_t i = 0; i < 20; i++ )
      {
         merkle_leafs.push_back( crypto::hash( koinos::crypto::multicodec::sha2_256, create_random_payload( 32 ) ) );
         string_leafs.push_back( util::converter::as< std::string >( merkle_leafs.back() ) );
      }

      auto merkle_root = util::converter::as< std::string >( crypto::merkle_tree( koinos::crypto::multicodec::sha2_256, merkle_leafs ).root()->hash() );
      int64_t time = 0;
      uint64_t runs = std::max( uint64_t( 1 ), global_run / 20 );

      chain::resource_limit_data rld;
      rld.set_compute_bandwidth_limit( 10'000'000'000 );

      ctx.resource_meter().set_resource_limit_data( rld );
      auto session = ctx.make_session( 10'000'000'000 );

      auto start = std::chrono::steady_clock::now();
      for ( int i = 0; i < runs; i++ )
      {
         koinos::chain::system_call::verify_merkle_root( ctx, merkle_root, string_leafs );
      }
      auto stop = std::chrono::steady_clock::now();
      time += std::chrono::duration_cast< std::chrono::nanoseconds >( stop - start ).count();

      time /= runs;
      time -= ( string_leafs.size() + 1 ) * calls[ "deserialize_multihash_per_byte" ] + calls[ "deserialize_multihash_base" ];
      time -= 21 * ( calls[ "sha2_256_base" ] + 2 * 32 * calls[ "sha2_256_per_byte" ] );
      calls[ "verify_merkle_root" ] = std::max( int64_t(1), int64_t( ceil( time ) ) );
   }

   calls["deserialize_message_per_byte"] = 1;
   calls["object_serialization_per_byte"] = 1;

   std::map< std::string, std::vector< std::string > > subcalls;
   subcalls[ "process_block_signature" ] = { "get_object", "recover_public_key" };
   subcalls[ "apply_block" ] = { "get_resource_limits", "pre_block_callback", "verify_merkle_root", "hash", "process_block_signature", "put_object", "post_block_callback", "consume_block_resources" };
   subcalls[ "apply_transaction" ] = { "get_object", "verify_merkle_root", "get_account_rc", "pre_transaction_callback", "check_authority", "verify_account_nonce", "set_account_nonce", "post_transaction_callback", "consume_account_rc" };
   subcalls[ "apply_upload_contract_operation" ] = { "check_authority", "hash", "put_object", "put_object" };
   subcalls[ "apply_call_contract_operation" ] = { "call_contract" };
   subcalls[ "apply_set_system_call_operation" ] = { "check_system_authority", "get_object", "get_object", "put_object" };
   subcalls[ "apply_set_system_contract_operation" ] = { "check_system_authority", "get_object", "get_object", "put_object" };
   subcalls[ "call_contract" ] = { "get_object", "get_object" };
   subcalls[ "check_authority" ] = { "get_object", "recover_public_key", "recover_public_key", "recover_public_key" };
   subcalls[ "get_account_nonce" ] = { "get_object" };
   subcalls[ "verify_account_nonce" ] = { "get_account_nonce" };
   subcalls[ "set_account_nonce" ] = { "put_object" };
   subcalls[ "get_account_rc" ] = { "get_object" };
   subcalls[ "get_resource_limits" ] = { "get_object" };
   subcalls[ "check_system_authority" ] = { "get_object", "recover_public_key", "recover_public_key", "recover_public_key" };
   subcalls[ "verify_signature" ] = { "recover_public_key" };
   subcalls[ "get_chain_id" ] = { "get_object" };

   std::cout << "std::map< std::string, uint64_t > thunk_compute {" << std::endl;
   for ( const auto& [ key, value ] : calls )
   {
      auto time = value;
      auto iter = subcalls.find( key );
      if ( iter != subcalls.end() )
      {
         auto subs = iter->second;
         for ( const auto& element: subs )
         {
            auto siter = calls.find( element );
            KOINOS_ASSERT( siter != calls.end(), koinos::exception, "unable to find call timing for ${name}", ("name", element) );
            if ( siter->second > time )
               time = 1;
            else
               time -= siter->second;
         }
      }
      uint64_t compute = uint64_t( time * compute_per_nanosecond );
      compute = compute ? compute : 1;
      std::cout << "   { \"" << key << "\", " << compute << " }," << std::endl;
   }
   std::cout << "};" << std::endl;
} KOINOS_CATCH_LOG_AND_RETHROW(info) }

BOOST_AUTO_TEST_SUITE_END()
